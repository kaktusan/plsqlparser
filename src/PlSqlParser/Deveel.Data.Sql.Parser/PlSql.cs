/* Generated By:CSharpCC: Do not edit this line. PlSql.cs */
namespace Deveel.Data.Sql.Parser {


using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

using Deveel.Data.Expressions;
using Deveel.Data.Sql.Statements;
using Deveel.Data.Types;

class PlSql : PlSqlConstants {
    private ObjectName lastObjectReference = null;

    protected bool seeTYPE() {
        return "TYPE".Equals(GetToken(1).image, StringComparison.OrdinalIgnoreCase);
    }

    protected static IList<String> ANALYTIC_FUNCTION_NAMES = new List<String>();

    protected bool seeAnalyticFunction() {
        return "(".Equals(GetToken(2).image)
            && ANALYTIC_FUNCTION_NAMES.Contains(GetToken(1).image.ToUpper());
    }

        protected bool SeeLastRef(String s) {
                if (lastObjectReference == null)
                        return false;

                return String.Equals(s, lastObjectReference.ToString(), StringComparison.OrdinalIgnoreCase);
        }

        public void Reset() {
        }

/* Represents a PLSQL code block. */
  public void CompilationUnit() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_PROCEDURE:
      ProcedureDeclaration();
      break;
    case K_FUNCTION:
      FunctionDeclaration();
      break;
    case K_BEGIN:
    case K_CLOSE:
    case K_COMMIT:
    case K_DECLARE:
    case K_DELETE:
    case K_EXIT:
    case K_FETCH:
    case K_FOR:
    case K_FORALL:
    case K_GOTO:
    case K_IF:
    case K_INSERT:
    case K_LOCK:
    case K_LOOP:
    case K_NULL:
    case K_OPEN:
    case K_RAISE:
    case K_RETURN:
    case K_ROLLBACK:
    case K_SAVEPOINT:
    case K_SELECT:
    case K_SET:
    case K_UPDATE:
    case K_WHILE:
    case S_IDENTIFIER:
    case S_BIND:
    case S_QUOTED_IDENTIFIER:
    case 150:
    case 154:
    case 160:
      SequenceOfStatements();
      break;
    case K_ALTER:
      AlterSession();
      break;
    case K_CALL:
      mcc_consume_token(K_CALL);
      ProcedureCall();
      break;
    default:
      mcc_la1[0] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public ObjectName BindVariable() {
  Token t1 = null, t2 = null; String s = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_BIND:
      t1 = mcc_consume_token(S_BIND);
                                  s = t1.image;
      break;
    case 150:
      mcc_consume_token(150);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case S_NUMBER:
        t1 = mcc_consume_token(S_NUMBER);
                                          s = t1.image;
        break;
      case S_IDENTIFIER:
        t1 = mcc_consume_token(S_IDENTIFIER);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 151:
          mcc_consume_token(151);
          t2 = mcc_consume_token(S_IDENTIFIER);
          break;
        default:
          mcc_la1[1] = mcc_gen;
          ;
          break;
        }
                                                                  s = t1.image; if (t2 != null) s += "." + t2.image;
        break;
      default:
        mcc_la1[2] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[3] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return ParserUtil.ObjectName(s);}
    throw new Exception("Missing return statement in function");
  }

  public void AlterSession() {
    mcc_consume_token(K_ALTER);
    ID("SESSION");
    mcc_consume_token(K_SET);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case S_IDENTIFIER:
        ;
        break;
      default:
        mcc_la1[4] = mcc_gen;
        goto label_1;
      }
      mcc_consume_token(S_IDENTIFIER);
      mcc_consume_token(152);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case S_CHAR_LITERAL:
        mcc_consume_token(S_CHAR_LITERAL);
        break;
      default:
        mcc_la1[5] = mcc_gen;
        if (Regex.IsMatch(GetToken(1).image, "(?i)TRUE|FALSE")) {
          mcc_consume_token(S_IDENTIFIER);
        } else {
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      }
    }label_1: ;
    
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_COMMENT:
      mcc_consume_token(K_COMMENT);
      mcc_consume_token(152);
      mcc_consume_token(S_CHAR_LITERAL);
      break;
    default:
      mcc_la1[6] = mcc_gen;
      ;
      break;
    }
  }

  public void DeclarationSection() {
    mcc_consume_token(K_DECLARE);
    Declarations();
  }

  public void Declarations() {
    while (true) {
      if (seeTYPE()) {
        ID("TYPE");
        mcc_consume_token(S_IDENTIFIER);
        mcc_consume_token(K_IS);
        TypeDefinition();
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case K_CURSOR:
          CursorDeclaration();
          break;
        case K_PRAGMA:
          PragmaDeclaration();
          break;
        case S_IDENTIFIER:
          IdentifierDeclaration();
          break;
        default:
          mcc_la1[7] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      mcc_consume_token(153);
      if (mcc_2_1(1)) {
        ;
      } else {
        goto label_2;
      }
    }label_2: ;
    
    while (true) {
      if (mcc_2_2(1)) {
        ;
      } else {
        goto label_3;
      }
      if (!seeTYPE()) {
        ProcedureDeclaration();
      } else if (!seeTYPE()) {
        FunctionDeclaration();
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_3: ;
    
  }

  public void IdentifierDeclaration() {
    mcc_consume_token(S_IDENTIFIER);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_CONSTANT:
      ConstantDeclaration();
      break;
    case K_BINARY_INTEGER:
    case K_BOOLEAN:
    case K_CHAR:
    case K_DATE:
    case K_FLOAT:
    case K_INTEGER:
    case K_NATURAL:
    case K_NUMBER:
    case K_REAL:
    case K_VARCHAR2:
    case K_VARCHAR:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      VariableDeclaration();
      break;
    case K_EXCEPTION:
      ExceptionDeclaration();
      break;
    default:
      mcc_la1[8] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void CursorDeclaration() {
    mcc_consume_token(K_CURSOR);
    mcc_consume_token(S_IDENTIFIER);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 154:
      mcc_consume_token(154);
      ParameterList();
      mcc_consume_token(155);
      break;
    default:
      mcc_la1[9] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_IS);
    SelectStatement();
  }

  public void PragmaDeclaration() {
    mcc_consume_token(K_PRAGMA);
    mcc_consume_token(K_EXCEPTION_INIT);
    mcc_consume_token(154);
    NumOrID();
    mcc_consume_token(156);
    NumOrID();
    mcc_consume_token(155);
  }

  public void ProcedureDeclaration() {
    mcc_consume_token(K_PROCEDURE);
    mcc_consume_token(S_IDENTIFIER);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 154:
      mcc_consume_token(154);
      ParameterList();
      mcc_consume_token(155);
      break;
    default:
      mcc_la1[10] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 153:
      mcc_consume_token(153);
      break;
    case K_IS:
      mcc_consume_token(K_IS);
      ProcedureBody();
      break;
    default:
      mcc_la1[11] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void ProcedureBody() {
    if (mcc_2_3(1)) {
      Declarations();
    } else {
      ;
    }
    BeginEndBlock();
  }

  public void FunctionDeclaration() {
    mcc_consume_token(K_FUNCTION);
    mcc_consume_token(S_IDENTIFIER);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 154:
      mcc_consume_token(154);
      ParameterList();
      mcc_consume_token(155);
      break;
    default:
      mcc_la1[12] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_RETURN);
    TypeDefinition();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 153:
      mcc_consume_token(153);
      break;
    case K_IS:
      mcc_consume_token(K_IS);
      FunctionBody();
      break;
    default:
      mcc_la1[13] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void FunctionBody() {
    if (mcc_2_4(1)) {
      Declarations();
    } else {
      ;
    }
    BeginEndBlock();
  }

  public void VariableDeclaration() {
    TypeDefinition();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_NOT:
      mcc_consume_token(K_NOT);
      mcc_consume_token(K_NULL);
      break;
    default:
      mcc_la1[14] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_DEFAULT:
    case 157:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 157:
        mcc_consume_token(157);
        break;
      case K_DEFAULT:
        mcc_consume_token(K_DEFAULT);
        break;
      default:
        mcc_la1[15] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      PlSqlExpression();
      break;
    default:
      mcc_la1[16] = mcc_gen;
      ;
      break;
    }
  }

  public void ConstantDeclaration() {
    mcc_consume_token(K_CONSTANT);
    TypeDefinition();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_NOT:
      mcc_consume_token(K_NOT);
      mcc_consume_token(K_NULL);
      break;
    default:
      mcc_la1[17] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 157:
      mcc_consume_token(157);
      break;
    case K_DEFAULT:
      mcc_consume_token(K_DEFAULT);
      break;
    default:
      mcc_la1[18] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    PlSqlExpression();
  }

  public DataType TypeDefinition() {
  DataType dataType = null;
  Token tRef = null; ObjectName objRef = null; bool rowType = false, extRef = false;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_BINARY_INTEGER:
    case K_BOOLEAN:
    case K_CHAR:
    case K_DATE:
    case K_FLOAT:
    case K_INTEGER:
    case K_NATURAL:
    case K_NUMBER:
    case K_REAL:
    case K_VARCHAR2:
    case K_VARCHAR:
      dataType = BasicDataTypeDefinition();
      break;
    default:
      mcc_la1[20] = mcc_gen;
      if (mcc_2_5(2)) {
        tRef = mcc_consume_token(S_IDENTIFIER);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 158:
          mcc_consume_token(158);
          break;
        case 159:
          mcc_consume_token(159);
                                         rowType = true;
          break;
        default:
          mcc_la1[19] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      } else if (mcc_2_6(2147483647)) {
        objRef = TableColumn();
        mcc_consume_token(158);
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case S_IDENTIFIER:
          tRef = mcc_consume_token(S_IDENTIFIER);
                            extRef = true;
          break;
        default:
          mcc_la1[21] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    }
          {return dataType != null ? dataType : ParserUtil.RefType(tRef, objRef, rowType, extRef);}
    throw new Exception("Missing return statement in function");
  }

  public DataType BasicDataTypeDefinition() {
  SqlType sqlType = SqlType.Unknown;
  Token size = null, scale = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_CHAR:
    case K_FLOAT:
    case K_INTEGER:
    case K_NATURAL:
    case K_NUMBER:
    case K_REAL:
    case K_VARCHAR2:
    case K_VARCHAR:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_CHAR:
        mcc_consume_token(K_CHAR);
                                          sqlType = SqlType.Char;
        break;
      case K_VARCHAR:
        mcc_consume_token(K_VARCHAR);
                                  sqlType = SqlType.VarChar;
        break;
      case K_VARCHAR2:
        mcc_consume_token(K_VARCHAR2);
                                  sqlType = SqlType.VarChar;
        break;
      case K_INTEGER:
        mcc_consume_token(K_INTEGER);
                                  sqlType = SqlType.Integer;
        break;
      case K_NUMBER:
        mcc_consume_token(K_NUMBER);
                                  sqlType = SqlType.Numeric;
        break;
      case K_NATURAL:
        mcc_consume_token(K_NATURAL);
                                  sqlType = SqlType.Decimal;
        break;
      case K_REAL:
        mcc_consume_token(K_REAL);
                                          sqlType = SqlType.Real;
        break;
      case K_FLOAT:
        mcc_consume_token(K_FLOAT);
                                          sqlType = SqlType.Float;
        break;
      default:
        mcc_la1[22] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 154:
        mcc_consume_token(154);
        size = mcc_consume_token(S_NUMBER);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 156:
          mcc_consume_token(156);
          scale = mcc_consume_token(S_NUMBER);
          break;
        default:
          mcc_la1[23] = mcc_gen;
          ;
          break;
        }
        mcc_consume_token(155);
        break;
      default:
        mcc_la1[24] = mcc_gen;
        ;
        break;
      }
      break;
    case K_DATE:
      mcc_consume_token(K_DATE);
                                          sqlType = SqlType.Date;
      break;
    case K_BINARY_INTEGER:
      mcc_consume_token(K_BINARY_INTEGER);
                                  sqlType = SqlType.Binary;
      break;
    case K_BOOLEAN:
      mcc_consume_token(K_BOOLEAN);
                                          sqlType = SqlType.Boolean;
      break;
    default:
      mcc_la1[25] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
          {return ParserUtil.PrimitiveType(sqlType, size, scale);}
    throw new Exception("Missing return statement in function");
  }

  public void ExceptionDeclaration() {
    mcc_consume_token(K_EXCEPTION);
  }

/* ---------------- DECLARATIONS SECTION ends here ------------------ */

/* ---------------- Code Section starts here ---------------------- */
  public void BeginEndBlock() {
    mcc_consume_token(K_BEGIN);
    SequenceOfStatements();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_EXCEPTION:
      ExceptionBlock();
      break;
    default:
      mcc_la1[26] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_END);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
      mcc_consume_token(S_IDENTIFIER);
      break;
    default:
      mcc_la1[27] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(153);
  }

  public IEnumerable<Statement> SequenceOfStatements() {
  var statements = new List<Statement>();
  Statement statement;
    while (true) {
      statement = PLSQLStatement();
                                     statements.Add(statement);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_BEGIN:
      case K_CLOSE:
      case K_COMMIT:
      case K_DECLARE:
      case K_DELETE:
      case K_EXIT:
      case K_FETCH:
      case K_FOR:
      case K_FORALL:
      case K_GOTO:
      case K_IF:
      case K_INSERT:
      case K_LOCK:
      case K_LOOP:
      case K_NULL:
      case K_OPEN:
      case K_RAISE:
      case K_RETURN:
      case K_ROLLBACK:
      case K_SAVEPOINT:
      case K_SELECT:
      case K_SET:
      case K_UPDATE:
      case K_WHILE:
      case S_IDENTIFIER:
      case S_BIND:
      case S_QUOTED_IDENTIFIER:
      case 150:
      case 154:
      case 160:
        ;
        break;
      default:
        mcc_la1[28] = mcc_gen;
        goto label_4;
      }
    }label_4: ;
    
          {return statements.AsReadOnly();}
    throw new Exception("Missing return statement in function");
  }

  public void ExceptionBlock() {
    mcc_consume_token(K_EXCEPTION);
    while (true) {
      ExceptionHandler();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_WHEN:
        ;
        break;
      default:
        mcc_la1[29] = mcc_gen;
        goto label_5;
      }
    }label_5: ;
    
  }

  public void ExceptionHandler() {
    mcc_consume_token(K_WHEN);
    mcc_consume_token(S_IDENTIFIER);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_OR:
        ;
        break;
      default:
        mcc_la1[30] = mcc_gen;
        goto label_6;
      }
      mcc_consume_token(K_OR);
      mcc_consume_token(S_IDENTIFIER);
    }label_6: ;
    
    mcc_consume_token(K_THEN);
    SequenceOfStatements();
  }

  public Statement PLSQLStatement() {
  Statement statement = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_EXIT:
      ExitStatement();
      break;
    case K_GOTO:
      GotoStatement();
      break;
    case K_IF:
      IfStatement();
      break;
    case 160:
      LabelDeclaration();
      break;
    case K_FOR:
    case K_LOOP:
    case K_WHILE:
      LoopStatement();
      break;
    case K_NULL:
      NullStatement();
      break;
    case K_RAISE:
      RaiseStatement();
      break;
    case K_RETURN:
      ReturnStatement();
      break;
    case K_FORALL:
      ForallStatement();
      break;
    case K_CLOSE:
    case K_COMMIT:
    case K_DELETE:
    case K_FETCH:
    case K_INSERT:
    case K_LOCK:
    case K_OPEN:
    case K_ROLLBACK:
    case K_SAVEPOINT:
    case K_SELECT:
    case K_SET:
    case K_UPDATE:
    case 154:
      statement = SQLStatement();
      break;
    case K_BEGIN:
    case K_DECLARE:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_DECLARE:
        DeclarationSection();
        break;
      default:
        mcc_la1[31] = mcc_gen;
        ;
        break;
      }
      BeginEndBlock();
      break;
    default:
      mcc_la1[32] = mcc_gen;
      if (mcc_2_7(2147483647)) {
        statement = AssignmentStatement();
      } else if (mcc_2_8(2147483647)) {
        ProcedureCall();
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    }
          {return statement;}
    throw new Exception("Missing return statement in function");
  }

  public void LabelDeclaration() {
    mcc_consume_token(160);
    mcc_consume_token(S_IDENTIFIER);
    mcc_consume_token(161);
  }

  public void ForallStatement() {
    mcc_consume_token(K_FORALL);
    mcc_consume_token(S_IDENTIFIER);
    mcc_consume_token(K_IN);
    PlSqlSimpleExpression();
    mcc_consume_token(162);
    PlSqlSimpleExpression();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_INSERT:
      InsertStatement();
      break;
    case K_UPDATE:
      UpdateStatement();
      break;
    case K_DELETE:
      DeleteStatement();
      break;
    default:
      mcc_la1[33] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public Statement SQLStatement() {
  Statement statement = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_CLOSE:
      CloseStatement();
      break;
    case K_COMMIT:
      CommitStatement();
      break;
    case K_DELETE:
      DeleteStatement();
      break;
    case K_FETCH:
      FetchStatement();
      break;
    case K_INSERT:
      InsertStatement();
      break;
    case K_LOCK:
      LockTableStatement();
      break;
    case K_OPEN:
      OpenStatement();
      break;
    case K_ROLLBACK:
      RollbackStatement();
      break;
    case K_SAVEPOINT:
      SavepointStatement();
      break;
    case K_SELECT:
    case 154:
      statement = QueryStatement();
      break;
    case K_SET:
      SetStatement();
      break;
    case K_UPDATE:
      UpdateStatement();
      break;
    default:
      mcc_la1[34] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
          {return statement;}
    throw new Exception("Missing return statement in function");
  }

  public void ProcedureCall() {
    ProcedureReference();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 154:
      mcc_consume_token(154);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_CASE:
      case K_CAST:
      case K_NOT:
      case K_NULL:
      case K_SQL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 150:
      case 154:
      case 163:
      case 164:
        Arguments();
        break;
      default:
        mcc_la1[35] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(155);
      break;
    default:
      mcc_la1[36] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(153);
  }

  public ObjectName ProcedureReference() {
    ObjectName name;
    name = ObjectReference();
     {return name;}
    throw new Exception("Missing return statement in function");
  }

  public AssignmentStatement AssignmentStatement() {
    DataItem();
    mcc_consume_token(157);
    PlSqlExpression();
    mcc_consume_token(153);
          {return null;}
    throw new Exception("Missing return statement in function");
  }

  public void ExitStatement() {
    mcc_consume_token(K_EXIT);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
      mcc_consume_token(S_IDENTIFIER);
      break;
    default:
      mcc_la1[37] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_WHEN:
      mcc_consume_token(K_WHEN);
      PlSqlExpression();
      break;
    default:
      mcc_la1[38] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(153);
  }

  public void GotoStatement() {
    mcc_consume_token(K_GOTO);
    mcc_consume_token(S_IDENTIFIER);
    mcc_consume_token(153);
  }

  public void IfStatement() {
    mcc_consume_token(K_IF);
    PlSqlExpression();
    mcc_consume_token(K_THEN);
    SequenceOfStatements();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_ELSIF:
        ;
        break;
      default:
        mcc_la1[39] = mcc_gen;
        goto label_7;
      }
      mcc_consume_token(K_ELSIF);
      PlSqlExpression();
      mcc_consume_token(K_THEN);
      SequenceOfStatements();
    }label_7: ;
    
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_ELSE:
      mcc_consume_token(K_ELSE);
      SequenceOfStatements();
      break;
    default:
      mcc_la1[40] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_END);
    mcc_consume_token(K_IF);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
      mcc_consume_token(S_IDENTIFIER);
      break;
    default:
      mcc_la1[41] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(153);
  }

  public void LoopStatement() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_LOOP:
      NormalLoop();
      break;
    case K_WHILE:
      WhileLoop();
      break;
    case K_FOR:
      ForLoop();
      break;
    default:
      mcc_la1[42] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void NormalLoop() {
    mcc_consume_token(K_LOOP);
    SequenceOfStatements();
    mcc_consume_token(K_END);
    mcc_consume_token(K_LOOP);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
      mcc_consume_token(S_IDENTIFIER);
      break;
    default:
      mcc_la1[43] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(153);
  }

  public void WhileLoop() {
    mcc_consume_token(K_WHILE);
    PlSqlExpression();
    NormalLoop();
  }

  public void ForLoop() {
    if (mcc_2_9(2147483647)) {
      NumericForLoop();
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_FOR:
        CursorForLoop();
        break;
      default:
        mcc_la1[44] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  public void NumericForLoopLookahead() {
    mcc_consume_token(K_FOR);
    mcc_consume_token(S_IDENTIFIER);
    mcc_consume_token(K_IN);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_REVERSE:
      mcc_consume_token(K_REVERSE);
      break;
    default:
      mcc_la1[45] = mcc_gen;
      ;
      break;
    }
    PlSqlSimpleExpression();
    mcc_consume_token(162);
  }

  public void NumericForLoop() {
    mcc_consume_token(K_FOR);
    mcc_consume_token(S_IDENTIFIER);
    mcc_consume_token(K_IN);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_REVERSE:
      mcc_consume_token(K_REVERSE);
      break;
    default:
      mcc_la1[46] = mcc_gen;
      ;
      break;
    }
    PlSqlSimpleExpression();
    mcc_consume_token(162);
    PlSqlSimpleExpression();
    NormalLoop();
  }

  public void CursorForLoop() {
    mcc_consume_token(K_FOR);
    mcc_consume_token(S_IDENTIFIER);
    mcc_consume_token(K_IN);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      CursorReference();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 154:
        mcc_consume_token(154);
        Arguments();
        mcc_consume_token(155);
        break;
      default:
        mcc_la1[47] = mcc_gen;
        ;
        break;
      }
      break;
    case 154:
      mcc_consume_token(154);
      SelectStatement();
      mcc_consume_token(155);
      break;
    default:
      mcc_la1[48] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    NormalLoop();
  }

  public void CursorReference() {
    ObjectReference();
  }

  public void NullStatement() {
    mcc_consume_token(K_NULL);
    mcc_consume_token(153);
  }

  public void RaiseStatement() {
    mcc_consume_token(K_RAISE);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
      mcc_consume_token(S_IDENTIFIER);
      break;
    default:
      mcc_la1[49] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(153);
  }

  public void ReturnStatement() {
    mcc_consume_token(K_RETURN);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_CASE:
    case K_CAST:
    case K_NOT:
    case K_NULL:
    case K_SQL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 150:
    case 154:
    case 163:
    case 164:
      PlSqlExpression();
      break;
    default:
      mcc_la1[50] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(153);
  }

  public void CloseStatement() {
    mcc_consume_token(K_CLOSE);
    mcc_consume_token(S_IDENTIFIER);
    mcc_consume_token(153);
  }

  public void CommitStatement() {
    mcc_consume_token(K_COMMIT);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_WORK:
      mcc_consume_token(K_WORK);
      break;
    default:
      mcc_la1[51] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_COMMENT:
      mcc_consume_token(K_COMMENT);
      mcc_consume_token(S_CHAR_LITERAL);
      break;
    default:
      mcc_la1[52] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(153);
  }

  public void FetchStatement() {
    mcc_consume_token(K_FETCH);
    mcc_consume_token(S_IDENTIFIER);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_INTO:
      mcc_consume_token(K_INTO);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case S_IDENTIFIER:
        mcc_consume_token(S_IDENTIFIER);
        break;
      case S_BIND:
      case 150:
        BindVariable();
        break;
      default:
        mcc_la1[53] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 156:
          ;
          break;
        default:
          mcc_la1[54] = mcc_gen;
          goto label_8;
        }
        mcc_consume_token(156);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case S_IDENTIFIER:
          mcc_consume_token(S_IDENTIFIER);
          break;
        case S_BIND:
        case 150:
          BindVariable();
          break;
        default:
          mcc_la1[55] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }label_8: ;
      
      break;
    default:
      mcc_la1[59] = mcc_gen;
      if (mcc_2_11(3)) {
        ID("BULK");
        ID("COLLECT");
        mcc_consume_token(K_INTO);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case S_IDENTIFIER:
          mcc_consume_token(S_IDENTIFIER);
          break;
        case 150:
          mcc_consume_token(150);
          mcc_consume_token(S_IDENTIFIER);
          break;
        default:
          mcc_la1[56] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        while (true) {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case 156:
            ;
            break;
          default:
            mcc_la1[57] = mcc_gen;
            goto label_9;
          }
          mcc_consume_token(156);
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case S_IDENTIFIER:
            mcc_consume_token(S_IDENTIFIER);
            break;
          case 150:
            mcc_consume_token(150);
            mcc_consume_token(S_IDENTIFIER);
            break;
          default:
            mcc_la1[58] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
        }label_9: ;
        
        if (mcc_2_10(2)) {
          ID("LIMIT");
          PlSqlSimpleExpression();
        } else {
          ;
        }
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    }
    mcc_consume_token(153);
  }

  public void LockTableStatement() {
    mcc_consume_token(K_LOCK);
    mcc_consume_token(K_TABLE);
    TableName();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 156:
        ;
        break;
      default:
        mcc_la1[60] = mcc_gen;
        goto label_10;
      }
      mcc_consume_token(156);
      TableName();
    }label_10: ;
    
    mcc_consume_token(K_IN);
    LockMode();
    ID("MODE");
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_NOWAIT:
      mcc_consume_token(K_NOWAIT);
      break;
    default:
      mcc_la1[61] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(153);
  }

  public void OpenStatement() {
    mcc_consume_token(K_OPEN);
    CursorReference();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 154:
      mcc_consume_token(154);
      Arguments();
      mcc_consume_token(155);
      break;
    default:
      mcc_la1[62] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(153);
  }

  public void RollbackStatement() {
    mcc_consume_token(K_ROLLBACK);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_WORK:
      mcc_consume_token(K_WORK);
      break;
    default:
      mcc_la1[63] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_TO:
      mcc_consume_token(K_TO);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_SAVEPOINT:
        mcc_consume_token(K_SAVEPOINT);
        break;
      default:
        mcc_la1[64] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(S_IDENTIFIER);
      break;
    default:
      mcc_la1[65] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_COMMENT:
      mcc_consume_token(K_COMMENT);
      mcc_consume_token(S_CHAR_LITERAL);
      break;
    default:
      mcc_la1[66] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(153);
  }

  public void SetStatement() {
    mcc_consume_token(K_SET);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_TRANSACTION:
      mcc_consume_token(K_TRANSACTION);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_READ:
        mcc_consume_token(K_READ);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case K_ONLY:
          mcc_consume_token(K_ONLY);
          break;
        case K_WRITE:
          mcc_consume_token(K_WRITE);
          break;
        default:
          mcc_la1[67] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      case K_ISOLATION:
        mcc_consume_token(K_ISOLATION);
        ID("LEVEL");
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case K_SERIALIZABLE:
          mcc_consume_token(K_SERIALIZABLE);
          break;
        case K_READ:
          mcc_consume_token(K_READ);
          ID("COMMITTED");
          break;
        default:
          mcc_la1[68] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      case K_USE:
        mcc_consume_token(K_USE);
        mcc_consume_token(K_ROLLBACK);
        ID("SEGMENT");
        ObjectReference();
        break;
      default:
        mcc_la1[69] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    case K_CONSTRAINT:
    case K_CONSTRAINTS:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_CONSTRAINT:
        mcc_consume_token(K_CONSTRAINT);
        break;
      case K_CONSTRAINTS:
        mcc_consume_token(K_CONSTRAINTS);
        break;
      default:
        mcc_la1[70] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_ALL:
        mcc_consume_token(K_ALL);
        break;
      case S_IDENTIFIER:
        mcc_consume_token(S_IDENTIFIER);
        while (true) {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case 156:
            ;
            break;
          default:
            mcc_la1[71] = mcc_gen;
            goto label_11;
          }
          mcc_consume_token(156);
          mcc_consume_token(S_IDENTIFIER);
        }label_11: ;
        
        break;
      default:
        mcc_la1[72] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      if (Regex.IsMatch(GetToken(1).image, "(?i)IMMEDIATE|DEFERRED")) {
        mcc_consume_token(S_IDENTIFIER);
      } else {
        ;
      }
      break;
    default:
      mcc_la1[73] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    mcc_consume_token(153);
  }

  public void LockMode() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_ROW:
      mcc_consume_token(K_ROW);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_SHARE:
        mcc_consume_token(K_SHARE);
        break;
      case K_EXCLUSIVE:
        mcc_consume_token(K_EXCLUSIVE);
        break;
      default:
        mcc_la1[74] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    case K_SHARE:
      mcc_consume_token(K_SHARE);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_ROW:
      case K_UPDATE:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case K_UPDATE:
          mcc_consume_token(K_UPDATE);
          break;
        case K_ROW:
          mcc_consume_token(K_ROW);
          mcc_consume_token(K_EXCLUSIVE);
          break;
        default:
          mcc_la1[75] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        mcc_la1[76] = mcc_gen;
        ;
        break;
      }
      break;
    case K_EXCLUSIVE:
      mcc_consume_token(K_EXCLUSIVE);
      break;
    default:
      mcc_la1[77] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void SavepointStatement() {
    mcc_consume_token(K_SAVEPOINT);
    mcc_consume_token(S_IDENTIFIER);
    mcc_consume_token(153);
  }

  public void UpdateStatement() {
    mcc_consume_token(K_UPDATE);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      TableName();
      break;
    case 154:
      mcc_consume_token(154);
      SubQuery();
      mcc_consume_token(155);
      break;
    default:
      mcc_la1[78] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      ObjectName();
      break;
    default:
      mcc_la1[79] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_SET);
    ColumnValues();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_WHERE:
      mcc_consume_token(K_WHERE);
      if (mcc_2_12(1)) {
        SQLExpression();
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case K_CURRENT:
          mcc_consume_token(K_CURRENT);
          mcc_consume_token(K_OF);
          mcc_consume_token(S_IDENTIFIER);
          break;
        default:
          mcc_la1[80] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      mcc_la1[81] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_RETURNING:
      ReturningClause();
      break;
    default:
      mcc_la1[82] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(153);
  }

  public void ReturningClause() {
    mcc_consume_token(K_RETURNING);
    SQLExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 156:
        ;
        break;
      default:
        mcc_la1[83] = mcc_gen;
        goto label_12;
      }
      mcc_consume_token(156);
      SQLExpression();
    }label_12: ;
    
    IntoClause();
  }

  public void ColumnValues() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      ColumnValue();
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 156:
          ;
          break;
        default:
          mcc_la1[84] = mcc_gen;
          goto label_13;
        }
        mcc_consume_token(156);
        ColumnValue();
      }label_13: ;
      
      break;
    case 154:
      mcc_consume_token(154);
      TableColumn();
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 156:
          ;
          break;
        default:
          mcc_la1[85] = mcc_gen;
          goto label_14;
        }
        mcc_consume_token(156);
        TableColumn();
      }label_14: ;
      
      mcc_consume_token(155);
      mcc_consume_token(152);
      mcc_consume_token(154);
      SelectStatement();
      mcc_consume_token(155);
      break;
    default:
      mcc_la1[86] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void ColumnValue() {
    TableColumn();
    mcc_consume_token(152);
    PlSqlExpression();
  }

  public void InsertStatement() {
    mcc_consume_token(K_INSERT);
    mcc_consume_token(K_INTO);
    TableName();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      ObjectName();
      break;
    default:
      mcc_la1[87] = mcc_gen;
      ;
      break;
    }
    if (mcc_2_13(2)) {
      mcc_consume_token(154);
      TableColumn();
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 156:
          ;
          break;
        default:
          mcc_la1[88] = mcc_gen;
          goto label_15;
        }
        mcc_consume_token(156);
        TableColumn();
      }label_15: ;
      
      mcc_consume_token(155);
    } else {
      ;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_VALUES:
      mcc_consume_token(K_VALUES);
      mcc_consume_token(154);
      PlSqlExpressionList();
      mcc_consume_token(155);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_RETURNING:
        ReturningClause();
        break;
      default:
        mcc_la1[89] = mcc_gen;
        ;
        break;
      }
      break;
    case K_SELECT:
    case 154:
      SubQuery();
      break;
    default:
      mcc_la1[90] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    mcc_consume_token(153);
  }

/*
void MergeTableReference():
{}
{
    ( TableName() // might also be a query name
     | TableCollectionExpression()
     | LOOKAHEAD(3) "(" SubQuery() ")"
     | "(" TableReference() ")"
     | BindVariable() // not valid SQL, but appears in StatsPack SQL text
    )
    ["PX_GRANULE" "(" <S_NUMBER> "," <S_IDENTIFIER> "," <S_IDENTIFIER> ")"]
    ["SAMPLE" [ID("BLOCK")] "(" <S_NUMBER> ")"]
    [ ObjectName()] // alias

    (Join())*
}

void MergeStatement():
{}
{
    "MERGE" "INTO" MergeTableReference()
    "USING" MergeTableReference() "ON" "(" SQLExpression() ")"
    "WHEN" ID("MATCHED") "THEN"
        "UPDATE" "SET" MergeSetColumn() ("," MergeSetColumn())*
    "WHEN" "NOT" ID("MATCHED") "THEN"
        "INSERT" "(" TableColumn() ("," TableColumn())* ")"
        "VALUES" "(" ("DEFAULT" | SQLExpressionList()) ")"
    ";"
}

void MergeSetColumn():
{}
{
    TableColumn() "=" ("DEFAULT" | SQLExpression())
}
*/
  public void DeleteStatement() {
    mcc_consume_token(K_DELETE);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_FROM:
      mcc_consume_token(K_FROM);
      break;
    default:
      mcc_la1[91] = mcc_gen;
      ;
      break;
    }
    TableName();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      ObjectName();
      break;
    default:
      mcc_la1[92] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_WHERE:
      mcc_consume_token(K_WHERE);
      if (mcc_2_14(1)) {
        SQLExpression();
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case K_CURRENT:
          mcc_consume_token(K_CURRENT);
          mcc_consume_token(K_OF);
          mcc_consume_token(S_IDENTIFIER);
          break;
        default:
          mcc_la1[93] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      mcc_la1[94] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(153);
  }

  public Statement QueryStatement() {
  Statement statement;
    statement = SelectStatement();
    mcc_consume_token(153);
          {return statement;}
    throw new Exception("Missing return statement in function");
  }

// PLSQL Expression and it's childs
  public Expression PlSqlExpression() {
  Expression exp = null, otherExp = null;
    exp = PlSqlAndExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_OR:
        ;
        break;
      default:
        mcc_la1[95] = mcc_gen;
        goto label_16;
      }
      mcc_consume_token(K_OR);
      otherExp = PlSqlAndExpression();
                                                exp = Expression.Or(exp, otherExp);
    }label_16: ;
    
          {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression PlSqlAndExpression() {
  Expression exp = null, otherExp = null;
    exp = PlSqlUnaryLogicalExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_AND:
        ;
        break;
      default:
        mcc_la1[96] = mcc_gen;
        goto label_17;
      }
      mcc_consume_token(K_AND);
      otherExp = PlSqlUnaryLogicalExpression();
                                                           exp = Expression.And(exp, otherExp);
    }label_17: ;
    
          {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression PlSqlUnaryLogicalExpression() {
  Expression exp = null;
  bool isNot = false;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_NOT:
      mcc_consume_token(K_NOT);
           isNot = true;
      break;
    default:
      mcc_la1[97] = mcc_gen;
      ;
      break;
    }
    exp = PlSqlRelationalExpression();
    if (isNot) exp = Expression.Not(exp);
    {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression PlSqlRelationalExpression() {
  Expression exp = null, otherExp = null;
  ExpressionType op;
    exp = PlSqlSimpleExpression();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_BETWEEN:
    case K_IN:
    case K_IS:
    case K_LIKE:
    case K_NOT:
    case 152:
    case 170:
    case 171:
    case 172:
    case 173:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 152:
      case 170:
      case 171:
      case 172:
      case 173:
        op = Relop();
        otherExp = PlSqlSimpleExpression();
                                                        exp = Expression.Binary(exp, op, otherExp);
        break;
      default:
        mcc_la1[98] = mcc_gen;
        if (mcc_2_15(2)) {
          exp = PlSqlInClause(exp);
        } else if (mcc_2_16(2)) {
          exp = PlSqlBetweenClause(exp);
        } else if (mcc_2_17(2)) {
          exp = PlSqlLikeClause(exp);
        } else {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case K_IS:
            exp = IsNullClause(exp);
            break;
          default:
            mcc_la1[99] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      }
      break;
    default:
      mcc_la1[100] = mcc_gen;
      ;
      break;
    }
     {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public IList<Expression> PlSqlExpressionList() {
  List<Expression> exps = new List<Expression>();
  Expression exp;
    exp = PlSqlExpression();
                              exps.Add(exp);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 156:
        ;
        break;
      default:
        mcc_la1[101] = mcc_gen;
        goto label_18;
      }
      mcc_consume_token(156);
      exp = PlSqlExpression();
                                       exps.Add(exp);
    }label_18: ;
    
          {return exps;}
    throw new Exception("Missing return statement in function");
  }

  public Expression PlSqlInClause(Expression exp) {
   IList<Expression> expList;
  bool isNot = false;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_NOT:
      mcc_consume_token(K_NOT);
             isNot = true;
      break;
    default:
      mcc_la1[102] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_IN);
    mcc_consume_token(154);
    expList = PlSqlExpressionList();
    mcc_consume_token(155);
          exp = Expression.In(exp, expList);
        if (isNot) exp = Expression.Not(exp);
        {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression PlSqlBetweenClause(Expression exp) {
  Expression min = null; Expression max = null;
  bool isNot=false;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_NOT:
      mcc_consume_token(K_NOT);
             isNot = true;
      break;
    default:
      mcc_la1[103] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_BETWEEN);
    min = PlSqlSimpleExpression();
    mcc_consume_token(K_AND);
    max = PlSqlSimpleExpression();
          if (isNot) exp = Expression.NotBetween(exp, min, max);
         else exp = Expression.Between(exp, min, max);
         {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression PlSqlLikeClause(Expression exp) {
  Expression likeExp = null, escapeExp = null;
  bool isNot = false;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_NOT:
      mcc_consume_token(K_NOT);
             isNot = true;
      break;
    default:
      mcc_la1[104] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_LIKE);
    likeExp = PlSqlSimpleExpression();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_ESCAPE:
      mcc_consume_token(K_ESCAPE);
      escapeExp = PlSqlSimpleExpression();
      break;
    default:
      mcc_la1[105] = mcc_gen;
      ;
      break;
    }
          exp = Expression.Like(exp, likeExp, escapeExp);
        if (isNot) exp = Expression.Not(exp);
        {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression IsNullClause(Expression exp) {
  bool isNot = false;
    mcc_consume_token(K_IS);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_NOT:
      mcc_consume_token(K_NOT);
                  isNot = true;
      break;
    default:
      mcc_la1[106] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_NULL);
          exp = Expression.IsNull(exp);
          if (isNot) exp = Expression.Not(exp);
          {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression PlSqlSimpleExpression() {
  Expression exp = null, otherExp = null;
  ExpressionType op;
    exp = PlSqlMultiplicativeExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 163:
      case 164:
      case 165:
        ;
        break;
      default:
        mcc_la1[107] = mcc_gen;
        goto label_19;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 163:
        mcc_consume_token(163);
                 op = ExpressionType.Add;
        break;
      case 164:
        mcc_consume_token(164);
                 op = ExpressionType.Subtract;
        break;
      case 165:
        mcc_consume_token(165);
                  op = ExpressionType.Concat;
        break;
      default:
        mcc_la1[108] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      otherExp = PlSqlMultiplicativeExpression();
                                                        exp = Expression.Binary(exp, op, otherExp);
    }label_19: ;
    
          {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression PlSqlMultiplicativeExpression() {
  Expression exp, otherExp = null;
  ExpressionType op;
    exp = PlSqlExponentExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case S_IDENTIFIER:
      case 166:
      case 167:
        ;
        break;
      default:
        mcc_la1[109] = mcc_gen;
        goto label_20;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 166:
        mcc_consume_token(166);
                  op = ExpressionType.Multiply;
        break;
      case 167:
        mcc_consume_token(167);
                  op = ExpressionType.Divide;
        break;
      case S_IDENTIFIER:
        ID("MOD");
                            op = ExpressionType.Modulo;
        break;
      default:
        mcc_la1[110] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      otherExp = PlSqlExponentExpression();
                                                       exp = Expression.Binary(exp, op, otherExp);
    }label_20: ;
    
          {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression PlSqlExponentExpression() {
  Expression exp, otherExp = null;
  ExpressionType op;
    exp = PlSqlUnaryExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 168:
        ;
        break;
      default:
        mcc_la1[111] = mcc_gen;
        goto label_21;
      }
      mcc_consume_token(168);
                 op = ExpressionType.Exponent;
      otherExp = PlSqlUnaryExpression();
                                                                                     exp = Expression.Binary(exp, op, otherExp);
    }label_21: ;
    
          {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression PlSqlUnaryExpression() {
  Expression exp;
  bool negative = false;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 163:
    case 164:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 163:
        mcc_consume_token(163);
        break;
      case 164:
        mcc_consume_token(164);
                  negative = true;
        break;
      default:
        mcc_la1[112] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      exp = PlSqlPrimaryExpression();
          if (negative) exp = Expression.Negative(exp);
      break;
    case K_CASE:
    case K_CAST:
    case K_NULL:
    case K_SQL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 150:
    case 154:
      exp = PlSqlPrimaryExpression();
          {return exp;}
      break;
    default:
      mcc_la1[113] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public Expression PlSqlPrimaryExpression() {
  Expression exp = null, otherExp = null;
  ObjectName refName = null;
  ObjectName varBind = null;
  TableSelectExpression selectExp = null;
  Token t;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_NUMBER:
      t = mcc_consume_token(S_NUMBER);
                      exp = Expression.Constant(ParserUtil.Number(t.image));
      break;
    case S_CHAR_LITERAL:
      t = mcc_consume_token(S_CHAR_LITERAL);
                           exp = Expression.Constant(ParserUtil.Unquote(t.image));
      break;
    case K_NULL:
      mcc_consume_token(K_NULL);
             exp = Expression.Constant(DataObject.Null);
      break;
    case K_CASE:
      exp = SQLCaseExpression();
      break;
    case 154:
      mcc_consume_token(154);
      if (mcc_2_18(3)) {
        selectExp = Select();
                                             exp = Expression.Query(selectExp);
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case K_CASE:
        case K_CAST:
        case K_NOT:
        case K_NULL:
        case K_SQL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 150:
        case 154:
        case 163:
        case 164:
          exp = PlSqlExpression();
                                 exp = Expression.Subset(exp);
          break;
        default:
          mcc_la1[114] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      mcc_consume_token(155);
      break;
    case S_BIND:
    case 150:
      varBind = BindVariable();
                               exp = Expression.Variable(varBind);
      break;
    default:
      mcc_la1[116] = mcc_gen;
      if (mcc_2_19(2)) {
        exp = SQLCastExpression();
      } else if (mcc_2_20(2147483647)) {
        IntervalExpression();
      } else if (mcc_2_21(2)) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case S_IDENTIFIER:
          mcc_consume_token(S_IDENTIFIER);
          break;
        case K_SQL:
          mcc_consume_token(K_SQL);
          break;
        default:
          mcc_la1[115] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        mcc_consume_token(169);
        ID("FOUND|NOTFOUND|ISOPEN|ROWCOUNT");
      } else if (mcc_2_22(2147483647)) {
        exp = FunctionCall();
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:
          refName = ObjectReference();
                                  exp = Expression.Variable(refName);
          break;
        default:
          mcc_la1[117] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    }
    {return exp;}
    throw new Exception("Missing return statement in function");
  }

/* ----------------------- PLSQL Code Block Ends here -------------- */

/* ---------------- General Productions --------------------- */
  public ObjectName TableColumn() {
  ObjectName name;
    name = ObjectReference();
          {return name;}
    throw new Exception("Missing return statement in function");
  }

  public ObjectName ObjectName() {
  String s;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
      mcc_consume_token(S_IDENTIFIER);
                             s = token.image;
      break;
    case S_QUOTED_IDENTIFIER:
      mcc_consume_token(S_QUOTED_IDENTIFIER);
                            s = token.image; s = s.Substring(1, s.Length - 2);
      break;
    default:
      mcc_la1[118] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return ParserUtil.ObjectName(s);}
    throw new Exception("Missing return statement in function");
  }

  public String TNSName() {
    StringBuilder name = new StringBuilder();
    mcc_consume_token(S_IDENTIFIER);
                         name.Append(token.image);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 151:
        ;
        break;
      default:
        mcc_la1[119] = mcc_gen;
        goto label_22;
      }
      mcc_consume_token(151);
      mcc_consume_token(S_IDENTIFIER);
                         name.Append(".").Append(token.image);
    }label_22: ;
    
     {return name.ToString();}
    throw new Exception("Missing return statement in function");
  }

  public ExpressionType Relop() {
  ExpressionType op ;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 152:
      mcc_consume_token(152);
            op = ExpressionType.Equal;
      break;
    case 170:
      mcc_consume_token(170);
      mcc_consume_token(152);
              op = ExpressionType.NotEqual;
      break;
    case 171:
      mcc_consume_token(171);
          op = ExpressionType.Like;
      break;
    default:
      mcc_la1[120] = mcc_gen;
      if (mcc_2_23(2)) {
        mcc_consume_token(172);
        mcc_consume_token(152);
                           op = ExpressionType.GreaterOrEqual;
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 172:
          mcc_consume_token(172);
          op = ExpressionType.Greater;
          break;
        default:
          mcc_la1[121] = mcc_gen;
          if (mcc_2_24(2)) {
            mcc_consume_token(173);
            mcc_consume_token(172);
                           op =ExpressionType.NotEqual;
          } else if (mcc_2_25(2)) {
            mcc_consume_token(173);
            mcc_consume_token(152);
                           op = ExpressionType.SmallerOrEqual;
          } else {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case 173:
              mcc_consume_token(173);
          op = ExpressionType.Smaller;
              break;
            default:
              mcc_la1[122] = mcc_gen;
              mcc_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        }
      }
      break;
    }
    {return op;}
    throw new Exception("Missing return statement in function");
  }

  public ObjectName TableName() {
        ObjectName objName, tempName = null;
    String s;
    StringBuilder name = new StringBuilder();
    // schema.table@link
        objName = ObjectName();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 151:
      mcc_consume_token(151);
      tempName = ObjectName();
                                    objName = objName.Child(tempName);
      break;
    default:
      mcc_la1[123] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 174:
      mcc_consume_token(174);
      s = TNSName();

      break;
    default:
      mcc_la1[124] = mcc_gen;
      ;
      break;
    }
      {return objName;}
    throw new Exception("Missing return statement in function");
  }

  public void ParameterList() {
    Parameter();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 156:
        ;
        break;
      default:
        mcc_la1[125] = mcc_gen;
        goto label_23;
      }
      mcc_consume_token(156);
      Parameter();
    }label_23: ;
    
  }

  public void NumOrID() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
      mcc_consume_token(S_IDENTIFIER);
      break;
    case S_NUMBER:
    case 163:
    case 164:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 163:
      case 164:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 163:
          mcc_consume_token(163);
          break;
        case 164:
          mcc_consume_token(164);
          break;
        default:
          mcc_la1[126] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        mcc_la1[127] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(S_NUMBER);
      break;
    default:
      mcc_la1[128] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void Parameter() {
    mcc_consume_token(S_IDENTIFIER);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_BINARY_INTEGER:
    case K_BOOLEAN:
    case K_CHAR:
    case K_DATE:
    case K_FLOAT:
    case K_IN:
    case K_INTEGER:
    case K_NATURAL:
    case K_NUMBER:
    case K_OUT:
    case K_REAL:
    case K_VARCHAR2:
    case K_VARCHAR:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_IN:
        mcc_consume_token(K_IN);
        break;
      default:
        mcc_la1[129] = mcc_gen;
        ;
        break;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_OUT:
        mcc_consume_token(K_OUT);
        break;
      default:
        mcc_la1[130] = mcc_gen;
        ;
        break;
      }
      TypeDefinition();
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_DEFAULT:
      case 157:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 157:
          mcc_consume_token(157);
          break;
        case K_DEFAULT:
          mcc_consume_token(K_DEFAULT);
          break;
        default:
          mcc_la1[131] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        PlSqlExpression();
        break;
      default:
        mcc_la1[132] = mcc_gen;
        ;
        break;
      }
      break;
    default:
      mcc_la1[133] = mcc_gen;
      ;
      break;
    }
  }

  public void Arguments() {
    Argument();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 156:
        ;
        break;
      default:
        mcc_la1[134] = mcc_gen;
        goto label_24;
      }
      mcc_consume_token(156);
      Argument();
    }label_24: ;
    
  }

  public void Argument() {
    if (mcc_2_26(2)) {
      mcc_consume_token(S_IDENTIFIER);
      mcc_consume_token(175);
    } else {
      ;
    }
    PlSqlExpression();
  }

/* --------------- General Productions ends here --------------- */

/* ----------- SQL productions start here ----------------- */
  public SelectStatement SelectStatement() {
  SelectStatement statement = new SelectStatement();
  TableSelectExpression tableSelect;
    tableSelect = SelectWithoutOrder();
          statement.SelectExpression = tableSelect;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_ORDER:
      OrderByClause(statement.OrderBy);
      break;
    default:
      mcc_la1[135] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_FOR:
      ForUpdateClause();
      break;
    default:
      mcc_la1[136] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_SKIP:
      mcc_consume_token(K_SKIP);
      ID("LOCKED");
      break;
    default:
      mcc_la1[137] = mcc_gen;
      ;
      break;
    }
          {return statement;}
    throw new Exception("Missing return statement in function");
  }

  public TableSelectExpression SelectWithoutOrder() {
  TableSelectExpression tableSelect, compositeSelect;
  CompositeFunction composite = CompositeFunction.None;
  bool isUnionAll = false;
    tableSelect = SelectSet();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_INTERSECT:
      case K_MINUS:
      case K_UNION:
      case 176:
        ;
        break;
      default:
        mcc_la1[138] = mcc_gen;
        goto label_25;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_UNION:
        mcc_consume_token(K_UNION);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case K_ALL:
          mcc_consume_token(K_ALL);
                              isUnionAll = true;
          break;
        default:
          mcc_la1[139] = mcc_gen;
          ;
          break;
        }
                                                       composite = CompositeFunction.Union;
        break;
      case K_INTERSECT:
        mcc_consume_token(K_INTERSECT);
                              composite = CompositeFunction.Intersect;
        break;
      case K_MINUS:
      case 176:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case K_MINUS:
          mcc_consume_token(K_MINUS);
          break;
        case 176:
          mcc_consume_token(176);
          break;
        default:
          mcc_la1[140] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
                                         composite = CompositeFunction.Except;
        break;
      default:
        mcc_la1[141] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      compositeSelect = SelectSet();
            tableSelect.ChainComposite(compositeSelect, composite, isUnionAll);
    }label_25: ;
    
          {return tableSelect;}
    throw new Exception("Missing return statement in function");
  }

  public TableSelectExpression SelectSet() {
  TableSelectExpression tableSelect = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_SELECT:
      tableSelect = Select();
      break;
    case 154:
      mcc_consume_token(154);
      SubQuery();
      mcc_consume_token(155);
      break;
    default:
      mcc_la1[142] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
          {return tableSelect;}
    throw new Exception("Missing return statement in function");
  }

  public TableSelectExpression Select() {
  TableSelectExpression selectExpr = new TableSelectExpression();
    mcc_consume_token(K_SELECT);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_ALL:
    case K_DISTINCT:
    case K_UNIQUE:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_ALL:
        mcc_consume_token(K_ALL);
        break;
      case K_DISTINCT:
        mcc_consume_token(K_DISTINCT);
                                    selectExpr.Distinct = true;
        break;
      case K_UNIQUE:
        mcc_consume_token(K_UNIQUE);
        break;
      default:
        mcc_la1[143] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[144] = mcc_gen;
      ;
      break;
    }
    SelectList(selectExpr.Columns);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_INTO:
      IntoClause();
      break;
    default:
      mcc_la1[145] = mcc_gen;
      ;
      break;
    }
    FromClause(selectExpr.From);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_WHERE:
      selectExpr.Where = WhereClause();
      break;
    default:
      mcc_la1[146] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_CONNECT:
    case K_START:
      ConnectClause();
      break;
    default:
      mcc_la1[147] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_GROUP:
    case K_HAVING:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_HAVING:
        selectExpr.Having = HavingClause();
        GroupByClause(selectExpr.GroupBy);
        break;
      case K_GROUP:
        GroupByClause(selectExpr.GroupBy);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case K_HAVING:
          selectExpr.Having = HavingClause();
          break;
        default:
          mcc_la1[148] = mcc_gen;
          ;
          break;
        }
        break;
      default:
        mcc_la1[149] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[150] = mcc_gen;
      ;
      break;
    }
          {return selectExpr;}
    throw new Exception("Missing return statement in function");
  }

/* Checks for whatever follows  SELECT */
  public void SelectList(ICollection<SelectColumn> columns) {
  SelectColumn column;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 166:
      mcc_consume_token(166);
          column = new SelectColumn(Expression.Constant(ParserUtil.String("*"))); columns.Add(column);
      break;
    default:
      mcc_la1[152] = mcc_gen;
      if (mcc_2_27(1)) {
        column = SelectItem();
                                    columns.Add(column);
        while (true) {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case 156:
            ;
            break;
          default:
            mcc_la1[151] = mcc_gen;
            goto label_26;
          }
          mcc_consume_token(156);
          column = SelectItem();
                                     columns.Add(column);
        }label_26: ;
        
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    }
  }

  public SelectColumn SelectItem() {
  Expression exp;
  ObjectName name = null, nameExt = null, alias = null;
    if (mcc_2_28(2)) {
      name = ObjectName();
      mcc_consume_token(177);
                                                exp = Expression.Variable(name.Child("*"));
    } else if (mcc_2_29(4)) {
      name = ObjectName();
      mcc_consume_token(151);
      nameExt = ObjectName();
      mcc_consume_token(177);
                                                                           exp = Expression.Variable(name.Child(nameExt).Child("*"));
    } else if (mcc_2_30(1)) {
      exp = SQLSimpleExpression();
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_AS:
    case K_RETURNING:
    case K_WHEN:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_AS:
        mcc_consume_token(K_AS);
        break;
      default:
        mcc_la1[153] = mcc_gen;
        ;
        break;
      }
      alias = SelectItemAlias();
      break;
    default:
      mcc_la1[154] = mcc_gen;
      ;
      break;
    }
          {return new SelectColumn(exp, alias);}
    throw new Exception("Missing return statement in function");
  }

  public ObjectName SelectItemAlias() {
  ObjectName alias = null; string s = null; Token t = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      alias = ObjectName();
          {return alias;}
      break;
    case K_RETURNING:
      t = mcc_consume_token(K_RETURNING);
                      s = t.image;
      break;
    case K_WHEN:
      t = mcc_consume_token(K_WHEN);
                                                    s = t.image;
    {return ParserUtil.ObjectName(s);}
      break;
    default:
      mcc_la1[155] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

  public void AnalyticFunction() {
    FunctionCall();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_OVER:
      mcc_consume_token(K_OVER);
      mcc_consume_token(154);
      AnalyticClause();
      mcc_consume_token(155);
      break;
    default:
      mcc_la1[156] = mcc_gen;
      ;
      break;
    }
  }

  public void AnalyticClause() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_PARTITION:
      QueryPartitionClause();
      break;
    default:
      mcc_la1[157] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_ORDER:
      OrderByClause(null);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_RANGE:
      case K_ROWS:
        WindowingClause();
        break;
      default:
        mcc_la1[158] = mcc_gen;
        ;
        break;
      }
      break;
    default:
      mcc_la1[159] = mcc_gen;
      ;
      break;
    }
  }

  public void QueryPartitionClause() {
    mcc_consume_token(K_PARTITION);
    mcc_consume_token(K_BY);
    SQLExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 156:
        ;
        break;
      default:
        mcc_la1[160] = mcc_gen;
        goto label_27;
      }
      mcc_consume_token(156);
      SQLExpression();
    }label_27: ;
    
  }

  public void WindowingClause() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_ROWS:
      mcc_consume_token(K_ROWS);
      break;
    case K_RANGE:
      mcc_consume_token(K_RANGE);
      break;
    default:
      mcc_la1[161] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_CURRENT:
      mcc_consume_token(K_CURRENT);
      mcc_consume_token(K_ROW);
      break;
    default:
      mcc_la1[164] = mcc_gen;
      if (mcc_2_33(1)) {
        SQLSimpleExpression();
        ID("PRECEDING");
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case K_BETWEEN:
          mcc_consume_token(K_BETWEEN);
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case K_CURRENT:
            mcc_consume_token(K_CURRENT);
            mcc_consume_token(K_ROW);
            break;
          default:
            mcc_la1[162] = mcc_gen;
            if (mcc_2_31(1)) {
              SQLSimpleExpression();
              ID("PRECEDING|FOLLOWING");
            } else {
              mcc_consume_token(-1);
              throw new ParseException();
            }
            break;
          }
          mcc_consume_token(K_AND);
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case K_CURRENT:
            mcc_consume_token(K_CURRENT);
            mcc_consume_token(K_ROW);
            break;
          default:
            mcc_la1[163] = mcc_gen;
            if (mcc_2_32(1)) {
              SQLSimpleExpression();
              ID("PRECEDING|FOLLOWING");
            } else {
              mcc_consume_token(-1);
              throw new ParseException();
            }
            break;
          }
          break;
        default:
          mcc_la1[165] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    }
  }

  public void IntoClause() {
    mcc_consume_token(K_INTO);
    DataItem();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 156:
        ;
        break;
      default:
        mcc_la1[166] = mcc_gen;
        goto label_28;
      }
      mcc_consume_token(156);
      DataItem();
    }label_28: ;
    
  }

  public void DataItem() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
      mcc_consume_token(S_IDENTIFIER);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 151:
        mcc_consume_token(151);
        mcc_consume_token(S_IDENTIFIER);
        break;
      default:
        mcc_la1[167] = mcc_gen;
        ;
        break;
      }
      break;
    case S_BIND:
    case 150:
      BindVariable();
      break;
    default:
      mcc_la1[168] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 154:
      mcc_consume_token(154);
      PlSqlSimpleExpression();
      mcc_consume_token(155);
      break;
    default:
      mcc_la1[169] = mcc_gen;
      ;
      break;
    }
  }

  public void FromClause(FromClause fromClause) {
    mcc_consume_token(K_FROM);
    TableReference(fromClause);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 156:
        ;
        break;
      default:
        mcc_la1[170] = mcc_gen;
        goto label_29;
      }
      mcc_consume_token(156);
      TableReference(fromClause);
    }label_29: ;
    
  }

  public void TableReference(FromClause fromClause) {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_ONLY:
      mcc_consume_token(K_ONLY);
      mcc_consume_token(154);
      QueryTableExpression(fromClause);
      mcc_consume_token(155);
      break;
    case K_TABLE:
    case S_IDENTIFIER:
    case S_BIND:
    case S_QUOTED_IDENTIFIER:
    case 150:
    case 154:
      QueryTableExpression(fromClause);
      break;
    default:
      mcc_la1[171] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

  public void QueryTableExpression(FromClause fromClause) {
    TableDeclaration(fromClause);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_INNER:
      case K_LEFT:
      case K_RIGHT:
      case S_IDENTIFIER:
      case 156:
        ;
        break;
      default:
        mcc_la1[172] = mcc_gen;
        goto label_30;
      }
      Join(fromClause);
    }label_30: ;
    
  }

  public void TableDeclaration(FromClause fromClause) {
  ObjectName name = null, alias = null; TableSelectExpression selectExp = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      name = TableName();
      break;
    case K_TABLE:
      TableCollectionExpression();
      break;
    default:
      mcc_la1[173] = mcc_gen;
      if (mcc_2_34(3)) {
        mcc_consume_token(154);
        selectExp = SubQuery();
        mcc_consume_token(155);
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 154:
          mcc_consume_token(154);
          TableReference(fromClause);
          mcc_consume_token(155);
          break;
        case S_BIND:
        case 150:
          BindVariable();
          break;
        default:
          mcc_la1[174] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      alias = ObjectName();
      break;
    default:
      mcc_la1[175] = mcc_gen;
      ;
      break;
    }
          fromClause.AddTableDeclaration(name, selectExp, alias);
  }

  public void TableCollectionExpression() {
    mcc_consume_token(K_TABLE);
    mcc_consume_token(154);
    SQLSimpleExpression();
    mcc_consume_token(155);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 154:
      mcc_consume_token(154);
      mcc_consume_token(163);
      mcc_consume_token(155);
      break;
    default:
      mcc_la1[176] = mcc_gen;
      ;
      break;
    }
  }

  public void Join(FromClause fromClause) {
  Expression onExpression;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 156:
      mcc_consume_token(156);
          fromClause.AddJoin(JoinType.Inner);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_ONLY:
      case K_TABLE:
      case S_IDENTIFIER:
      case S_BIND:
      case S_QUOTED_IDENTIFIER:
      case 150:
      case 154:
        TableReference(fromClause);
        break;
      default:
        mcc_la1[177] = mcc_gen;
        ;
        break;
      }
      break;
    case K_INNER:
    case S_IDENTIFIER:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_INNER:
        mcc_consume_token(K_INNER);
        break;
      default:
        mcc_la1[178] = mcc_gen;
        ;
        break;
      }
      ID("JOIN");
      TableDeclaration(fromClause);
      mcc_consume_token(K_ON);
      onExpression = SQLExpression();
          fromClause.AddPreviousJoin(JoinType.Inner, onExpression);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_INNER:
      case K_LEFT:
      case K_RIGHT:
      case S_IDENTIFIER:
      case 156:
        Join(fromClause);
        break;
      default:
        mcc_la1[179] = mcc_gen;
        ;
        break;
      }
      break;
    case K_LEFT:
      mcc_consume_token(K_LEFT);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 178:
        mcc_consume_token(178);
        break;
      default:
        mcc_la1[180] = mcc_gen;
        ;
        break;
      }
      ID("JOIN");
      TableDeclaration(fromClause);
      mcc_consume_token(K_ON);
      onExpression = SQLExpression();
          fromClause.AddPreviousJoin(JoinType.Left, onExpression);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_INNER:
      case K_LEFT:
      case K_RIGHT:
      case S_IDENTIFIER:
      case 156:
        Join(fromClause);
        break;
      default:
        mcc_la1[181] = mcc_gen;
        ;
        break;
      }
      break;
    case K_RIGHT:
      mcc_consume_token(K_RIGHT);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 178:
        mcc_consume_token(178);
        break;
      default:
        mcc_la1[182] = mcc_gen;
        ;
        break;
      }
      ID("JOIN");
      TableDeclaration(fromClause);
      mcc_consume_token(K_ON);
      onExpression = SQLExpression();
          fromClause.AddPreviousJoin(JoinType.Right, onExpression);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_INNER:
      case K_LEFT:
      case K_RIGHT:
      case S_IDENTIFIER:
      case 156:
        Join(fromClause);
        break;
      default:
        mcc_la1[183] = mcc_gen;
        ;
        break;
      }
      break;
    default:
      mcc_la1[184] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
  }

/*
JoinType JoinType():
{ JoinType joinType = JoinType.Inner; }
{
    "INNER" { joinType = JoinType.Inner; }
  | ("LEFT" | "RIGHT" | "FULL") ID("OUTER")
  { return joinType; }
}
*/
  public void ColumnName() {
    mcc_consume_token(S_IDENTIFIER);
  }

  public FilterExpression WhereClause() {
  Expression exp;
    mcc_consume_token(K_WHERE);
    exp = SQLExpression();
          {return new FilterExpression(exp);}
    throw new Exception("Missing return statement in function");
  }

  public void ConnectClause() {
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_START:
      mcc_consume_token(K_START);
      mcc_consume_token(K_WITH);
      SQLExpression();
      break;
    default:
      mcc_la1[185] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_CONNECT);
    mcc_consume_token(K_BY);
    SQLExpression();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_START:
      mcc_consume_token(K_START);
      mcc_consume_token(K_WITH);
      SQLExpression();
      break;
    default:
      mcc_la1[186] = mcc_gen;
      ;
      break;
    }
  }

  public void GroupByClause(ICollection<ByColumn> columns) {
  IEnumerable<Expression> exps;
    mcc_consume_token(K_GROUP);
    mcc_consume_token(K_BY);
    exps = SQLExpressionList();
                foreach(Expression exp in exps) {
                        columns.Add(new ByColumn(exp));
                }
  }

  public FilterExpression HavingClause() {
  Expression exp;
    mcc_consume_token(K_HAVING);
    exp = SQLExpression();
          {return new FilterExpression(exp);}
    throw new Exception("Missing return statement in function");
  }

  public void OrderByClause(ICollection<ByColumn> columns) {
  ByColumn column;
    mcc_consume_token(K_ORDER);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_SIBLINGS:
      mcc_consume_token(K_SIBLINGS);
      break;
    default:
      mcc_la1[187] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_BY);
    column = OrderByExpression();
                                                             columns.Add(column);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 156:
        ;
        break;
      default:
        mcc_la1[188] = mcc_gen;
        goto label_31;
      }
      mcc_consume_token(156);
      column = OrderByExpression();
                                            columns.Add(column);
    }label_31: ;
    
  }

  public ByColumn OrderByExpression() {
  Expression exp; bool ascending = false;
    exp = SQLSimpleExpression();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_ASC:
    case K_DESC:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_ASC:
        mcc_consume_token(K_ASC);
             ascending = true;
        break;
      case K_DESC:
        mcc_consume_token(K_DESC);
        break;
      default:
        mcc_la1[189] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[190] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_NULLS:
      mcc_consume_token(K_NULLS);
      ID("LAST");
      break;
    default:
      mcc_la1[191] = mcc_gen;
      ;
      break;
    }
          {return new ByColumn(exp, ascending);}
    throw new Exception("Missing return statement in function");
  }

  public void ForUpdateClause() {
    mcc_consume_token(K_FOR);
    mcc_consume_token(K_UPDATE);
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_OF:
      mcc_consume_token(K_OF);
      TableColumn();
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 156:
          ;
          break;
        default:
          mcc_la1[192] = mcc_gen;
          goto label_32;
        }
        mcc_consume_token(156);
        TableColumn();
      }label_32: ;
      
      break;
    default:
      mcc_la1[193] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_NOWAIT:
    case K_WAIT:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_NOWAIT:
        mcc_consume_token(K_NOWAIT);
        break;
      case K_WAIT:
        mcc_consume_token(K_WAIT);
        SQLSimpleExpression();
        break;
      default:
        mcc_la1[194] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[195] = mcc_gen;
      ;
      break;
    }
  }

  public Expression SQLExpression() {
  Expression exp, otherExp = null;
    exp = SQLAndExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_OR:
        ;
        break;
      default:
        mcc_la1[196] = mcc_gen;
        goto label_33;
      }
      mcc_consume_token(K_OR);
      otherExp = SQLAndExpression();
                                              exp = Expression.Or(exp, otherExp);
    }label_33: ;
    
          {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression SQLAndExpression() {
  Expression exp, otherExp = null;
    exp = SQLUnaryLogicalExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_AND:
        ;
        break;
      default:
        mcc_la1[197] = mcc_gen;
        goto label_34;
      }
      mcc_consume_token(K_AND);
      otherExp = SQLUnaryLogicalExpression();
                                                         exp = Expression.And(exp, otherExp);
    }label_34: ;
    
          {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression SQLUnaryLogicalExpression() {
  Expression exp = null;
  bool isNot = false;
    if (mcc_2_35(2)) {
      ExistsClause();
    } else if (mcc_2_36(1)) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_NOT:
        mcc_consume_token(K_NOT);
               isNot = true;
        break;
      default:
        mcc_la1[198] = mcc_gen;
        ;
        break;
      }
      exp = SQLRelationalExpression();
                                                                   if (isNot) exp = Expression.Not(exp);
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
    {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression ExistsClause() {
  Expression exp = null;
  bool isNot = false;
  TableSelectExpression query = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_NOT:
      mcc_consume_token(K_NOT);
             isNot = true;
      break;
    default:
      mcc_la1[199] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_EXISTS);
    mcc_consume_token(154);
    query = Select();
    mcc_consume_token(155);
          exp = Expression.FunctionCall("exists", Expression.Query(query));
        if (isNot)
        exp = Expression.Not(exp);
        {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression SQLRelationalExpression() {
  Expression exp = null; IEnumerable<Expression> array = null;
    if (mcc_2_37(2147483647)) {
      mcc_consume_token(154);
      array = SQLExpressionList();
                                       exp = Expression.Array(array);
      mcc_consume_token(155);
    } else if (mcc_2_38(1)) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_PRIOR:
        mcc_consume_token(K_PRIOR);
        break;
      default:
        mcc_la1[200] = mcc_gen;
        ;
        break;
      }
      exp = SQLSimpleExpression();
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_BETWEEN:
    case K_IN:
    case K_IS:
    case K_LIKE:
    case K_NOT:
    case 152:
    case 170:
    case 171:
    case 172:
    case 173:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 152:
      case 170:
      case 171:
      case 172:
      case 173:
        exp = SQLRelationalOperatorExpression(exp);
        break;
      default:
        mcc_la1[201] = mcc_gen;
        if (mcc_2_39(2)) {
          exp = SQLInClause();
        } else if (mcc_2_40(2)) {
          exp = SQLBetweenClause();
        } else if (mcc_2_41(2)) {
          exp = SQLLikeClause(exp);
        } else {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case K_IS:
            IsNullClause(null);
            break;
          default:
            mcc_la1[202] = mcc_gen;
            mcc_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      }
      break;
    default:
      mcc_la1[203] = mcc_gen;
      ;
      break;
    }
     {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public List<Expression> SQLExpressionList() {
  List<Expression> exps = new List<Expression>();
  Expression exp;
    exp = SQLExpression();
                            exps.Add(exp);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 156:
        ;
        break;
      default:
        mcc_la1[204] = mcc_gen;
        goto label_35;
      }
      mcc_consume_token(156);
      exp = SQLExpression();
                                     exps.Add(exp);
    }label_35: ;
    
          {return exps;}
    throw new Exception("Missing return statement in function");
  }

  public Expression SQLRelationalOperatorExpression(Expression exp) {
  Expression exp1 = null; ExpressionType op;
  TableSelectExpression selectExp = null; bool any = false; bool all = false;
  List<Expression> expList = null;
    op = Relop();
    if (mcc_2_44(2147483647)) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_ALL:
      case K_ANY:
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case K_ALL:
          mcc_consume_token(K_ALL);
                                  all = true;
          break;
        case K_ANY:
          mcc_consume_token(K_ANY);
                                                          any = true;
          break;
        default:
          mcc_la1[205] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        mcc_la1[206] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(154);
      if (mcc_2_42(2147483647)) {
        selectExp = SubQuery();
                                              exp1 = Expression.Query(selectExp);
      } else if (mcc_2_43(1)) {
        expList = SQLExpressionList();
                                                         exp1 = Expression.Array(expList);
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
      mcc_consume_token(155);
    } else if (mcc_2_45(1)) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_PRIOR:
        mcc_consume_token(K_PRIOR);
        break;
      default:
        mcc_la1[207] = mcc_gen;
        ;
        break;
      }
      exp1 = SQLSimpleExpression();
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
          if (any) {return Expression.Any(exp, op, exp1);}
          if (all) {return Expression.All(exp, op, exp1);}
          {return Expression.Binary(exp, op, exp1);}
    throw new Exception("Missing return statement in function");
  }

  public Expression SQLInClause() {
  Expression exp = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_NOT:
      mcc_consume_token(K_NOT);
      break;
    default:
      mcc_la1[208] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_IN);
    mcc_consume_token(154);
    if (mcc_2_46(3)) {
      SubQuery();
    } else if (mcc_2_47(1)) {
      SQLExpressionList();
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
    mcc_consume_token(155);
          {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression SQLBetweenClause() {
  Expression exp = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_NOT:
      mcc_consume_token(K_NOT);
      break;
    default:
      mcc_la1[209] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_BETWEEN);
    SQLSimpleExpression();
    mcc_consume_token(K_AND);
    SQLSimpleExpression();
          {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression SQLLikeClause(Expression exp) {
  Expression likeExp; bool isNot = false; Expression escapeExp = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_NOT:
      mcc_consume_token(K_NOT);
             isNot = true;
      break;
    default:
      mcc_la1[210] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_LIKE);
    likeExp = SQLSimpleExpression();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_ESCAPE:
      mcc_consume_token(K_ESCAPE);
      escapeExp = SQLSimpleExpression();
      break;
    default:
      mcc_la1[211] = mcc_gen;
      ;
      break;
    }
          exp = Expression.Like(exp, likeExp, escapeExp);
        if (isNot) exp = Expression.Not(exp);
        {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression SQLSimpleExpression() {
  Expression exp1, exp2 = null; ExpressionType op;
    exp1 = SQLMultiplicativeExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 163:
      case 164:
      case 165:
        ;
        break;
      default:
        mcc_la1[212] = mcc_gen;
        goto label_36;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 163:
        mcc_consume_token(163);
                 op = ExpressionType.Add;
        break;
      case 164:
        mcc_consume_token(164);
                                                    op = ExpressionType.Subtract;
        break;
      case 165:
        mcc_consume_token(165);
                                                                                             op = ExpressionType.Concat;
        break;
      default:
        mcc_la1[213] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      exp2 = SQLMultiplicativeExpression();
                                               exp1 = Expression.Binary(exp1, op, exp2);
    }label_36: ;
    
          {return exp1;}
    throw new Exception("Missing return statement in function");
  }

  public Expression SQLMultiplicativeExpression() {
  Expression exp, otherExp = null; ExpressionType op;
    exp = SQLExponentExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 166:
      case 167:
        ;
        break;
      default:
        mcc_la1[214] = mcc_gen;
        goto label_37;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 166:
        mcc_consume_token(166);
                 op = ExpressionType.Multiply;
        break;
      case 167:
        mcc_consume_token(167);
                                                         op = ExpressionType.Divide;
        break;
      default:
        mcc_la1[215] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      otherExp = SQLExponentExpression();
                                             exp = Expression.Binary(exp, op, otherExp);
    }label_37: ;
    
          {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression SQLExponentExpression() {
  Expression exp, otherExp = null; ExpressionType op;
    exp = SQLUnaryExpression();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 168:
        ;
        break;
      default:
        mcc_la1[216] = mcc_gen;
        goto label_38;
      }
      mcc_consume_token(168);
      otherExp = SQLUnaryExpression();
                                                 exp = Expression.Binary(exp, ExpressionType.Exponent, otherExp);
    }label_38: ;
    
          {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression SQLUnaryExpression() {
  Expression exp = null; bool isNegative = false;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 163:
    case 164:
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 163:
        mcc_consume_token(163);
        break;
      case 164:
        mcc_consume_token(164);
                 isNegative = true;
        break;
      default:
        mcc_la1[217] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[218] = mcc_gen;
      ;
      break;
    }
    exp = SQLPrimaryExpression();
          if (isNegative) exp = Expression.Negative(exp);
         {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression SQLPrimaryExpression() {
  Expression exp = null; Token t; TableSelectExpression selectExpr = null;
  ObjectName name = null;
  ObjectName varBind = null;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case S_NUMBER:
      t = mcc_consume_token(S_NUMBER);
                     exp = Expression.Constant(ParserUtil.Number(t.image));
      break;
    case S_CHAR_LITERAL:
      t = mcc_consume_token(S_CHAR_LITERAL);
                           exp = Expression.Constant(ParserUtil.Unquote(t.image));
      break;
    case K_NULL:
      mcc_consume_token(K_NULL);
             exp = Expression.Constant(ParserUtil.Null());
      break;
    case K_CASE:
      exp = SQLCaseExpression();
      break;
    case 154:
      mcc_consume_token(154);
      if (mcc_2_48(3)) {
        selectExpr = Select();
                                              exp = Expression.Query(selectExpr);
      } else if (mcc_2_49(1)) {
        exp = SQLExpression();
      } else {
        mcc_consume_token(-1);
        throw new ParseException();
      }
                                    exp = Expression.Subset(exp);
      mcc_consume_token(155);
      break;
    case S_BIND:
    case 150:
      varBind = BindVariable();
                               exp = Expression.Variable(varBind);
      break;
    default:
      mcc_la1[219] = mcc_gen;
      if (mcc_2_50(2)) {
        exp = SQLCastExpression();
      } else if (mcc_2_51(2147483647)) {
        IntervalExpression();
      } else if (mcc_2_52(2147483647)) {
        OuterJoinExpression();
      } else if (seeAnalyticFunction()) {
        AnalyticFunction();
      } else if (mcc_2_53(2147483647)) {
        exp = FunctionCall();
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:
          name = TableColumn();
                            exp = Expression.Variable(name);
          break;
        default:
          mcc_la1[220] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    }
    {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression SQLCaseExpression() {
  Expression exp = null;
  Expression exp1 = null, exp2 = null, test = null, ifTrue = null, ifFalse = null;
    mcc_consume_token(K_CASE);
    if (mcc_2_54(1)) {
      ifTrue = SQLSimpleExpression();
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case K_WHEN:
          ;
          break;
        default:
          mcc_la1[221] = mcc_gen;
          goto label_39;
        }
        mcc_consume_token(K_WHEN);
        test = SQLSimpleExpression();
        mcc_consume_token(K_THEN);
        ifFalse = SQLSimpleExpression();
                    exp1 = Expression.Conditional(test, ifTrue, ifFalse);
                        if (exp != null) exp = Expression.Or(exp, exp1);
                        else exp = exp1;
      }label_39: ;
      
    } else {
      while (true) {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case K_WHEN:
          ;
          break;
        default:
          mcc_la1[222] = mcc_gen;
          goto label_40;
        }
        mcc_consume_token(K_WHEN);
        test = SQLExpression();
        mcc_consume_token(K_THEN);
        ifTrue = SQLSimpleExpression();
                        exp1 = Expression.Conditional(test, ifTrue);
                        if (exp != null) exp = Expression.Or(exp, exp1);
                        else exp = exp1;
      }label_40: ;
      
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case K_ELSE:
      mcc_consume_token(K_ELSE);
      ifFalse = SQLSimpleExpression();

      break;
    default:
      mcc_la1[223] = mcc_gen;
      ;
      break;
    }
    mcc_consume_token(K_END);
          {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public Expression SQLCastExpression() {
  Expression exp;
    mcc_consume_token(K_CAST);
    mcc_consume_token(154);
    exp = SQLExpression();
    mcc_consume_token(K_AS);
    BasicDataTypeDefinition();
    mcc_consume_token(155);
          {return Expression.FunctionCall("cast", exp);}
    throw new Exception("Missing return statement in function");
  }

  public void IntervalExpression() {
    ID("INTERVAL");
    SQLSimpleExpression();
    if ("DAY".Equals(GetToken(1).image, StringComparison.OrdinalIgnoreCase)) {
      ID("DAY");
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 154:
        mcc_consume_token(154);
        mcc_consume_token(S_NUMBER);
        mcc_consume_token(155);
        break;
      default:
        mcc_la1[224] = mcc_gen;
        ;
        break;
      }
      mcc_consume_token(K_TO);
      ID("SECOND");
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 154:
        mcc_consume_token(154);
        mcc_consume_token(S_NUMBER);
        mcc_consume_token(155);
        break;
      default:
        mcc_la1[225] = mcc_gen;
        ;
        break;
      }
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case S_IDENTIFIER:
        ID("YEAR");
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 154:
          mcc_consume_token(154);
          mcc_consume_token(S_NUMBER);
          mcc_consume_token(155);
          break;
        default:
          mcc_la1[226] = mcc_gen;
          ;
          break;
        }
        mcc_consume_token(K_TO);
        ID("MONTH");
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case 154:
          mcc_consume_token(154);
          mcc_consume_token(S_NUMBER);
          mcc_consume_token(155);
          break;
        default:
          mcc_la1[227] = mcc_gen;
          ;
          break;
        }
        break;
      default:
        mcc_la1[228] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  public Expression FunctionCall() {
  Token t;
  ObjectName name;
  string dateTimeField;
  Expression exp = null;
  List<Expression> args = new List<Expression>();
  bool isAll = false;
  bool distinct = false;
    name = FunctionReference();
    if (SeeLastRef("TRIM")) {
      args = TrimArguments();
    } else if (SeeLastRef("EXTRACT")) {
      mcc_consume_token(154);
      dateTimeField = DatetimeField();
                                                  args.Add(Expression.Constant(ParserUtil.String(dateTimeField)));
      mcc_consume_token(K_FROM);
      exp = SQLSimpleExpression();
                                                      args.Add(exp);
      mcc_consume_token(155);
    } else {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 154:
        mcc_consume_token(154);
        if (mcc_2_56(1)) {
          switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
          case K_ALL:
          case K_DISTINCT:
          case K_UNIQUE:
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case K_ALL:
              mcc_consume_token(K_ALL);
                        isAll = true;
              break;
            case K_DISTINCT:
              mcc_consume_token(K_DISTINCT);
                                                      distinct = true;
              break;
            case K_UNIQUE:
              mcc_consume_token(K_UNIQUE);
              break;
            default:
              mcc_la1[229] = mcc_gen;
              mcc_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            mcc_la1[230] = mcc_gen;
            ;
            break;
          }
          if (mcc_2_55(1)) {
            args = FunctionArgumentList();
          } else {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case 166:
              mcc_consume_token(166);
                exp = Expression.Constant(ParserUtil.String("*")); args.Add(exp);
              break;
            default:
              mcc_la1[231] = mcc_gen;
              mcc_consume_token(-1);
              throw new ParseException();
            }
          }
        } else {
          ;
        }
        mcc_consume_token(155);
        break;
      default:
        mcc_la1[232] = mcc_gen;
        ;
        break;
      }
    }
          {return Expression.FunctionCall(name, args.ToArray());}
    throw new Exception("Missing return statement in function");
  }

  public ObjectName FunctionReference() {
    ObjectName name;
    name = ObjectReference();
      {return name;}
    throw new Exception("Missing return statement in function");
  }

  public List<Expression> FunctionArgumentList() {
  List<Expression> args = new List<Expression>();
  Expression arg;
    arg = FunctionArgument();
                               args.Add(arg);
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 156:
        ;
        break;
      default:
        mcc_la1[233] = mcc_gen;
        goto label_41;
      }
      mcc_consume_token(156);
      arg = FunctionArgument();
                                        args.Add(arg);
    }label_41: ;
    
          {return args;}
    throw new Exception("Missing return statement in function");
  }

  public Expression FunctionArgument() {
  Token t = null; Expression exp;
    if (mcc_2_57(2)) {
      t = mcc_consume_token(S_IDENTIFIER);
      mcc_consume_token(175);
    } else {
      ;
    }
    exp = SQLExpression();
          {return exp;}
    throw new Exception("Missing return statement in function");
  }

  public List<Expression> TrimArguments() {
  List<Expression> args = new List<Expression>();
  Expression exp = null;
  Token t = null;
    mcc_consume_token(154);
    if (Regex.IsMatch(GetToken(1).image, "(?i)LEADING|TRAILING|BOTH")) {
      t = mcc_consume_token(S_IDENTIFIER);
                                 args.Add(Expression.Constant(ParserUtil.String(t.image)));
      if (mcc_2_58(1)) {
        exp = SQLSimpleExpression();
                                                        args.Add(exp);
      } else {
        ;
      }
      mcc_consume_token(K_FROM);
      exp = SQLSimpleExpression();
                                                             args.Add(exp);
    } else if (mcc_2_59(1)) {
      exp = SQLSimpleExpression();
                                        args.Add(exp);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case K_FROM:
        mcc_consume_token(K_FROM);
        exp = SQLSimpleExpression();
                                                      args.Add(exp);
        break;
      default:
        mcc_la1[234] = mcc_gen;
        ;
        break;
      }
    } else {
      mcc_consume_token(-1);
      throw new ParseException();
    }
    mcc_consume_token(155);
          {return args;}
    throw new Exception("Missing return statement in function");
  }

  public string DatetimeField() {
  Token t;
    t = mcc_consume_token(S_IDENTIFIER);
     {return t.image;}
    throw new Exception("Missing return statement in function");
  }

  public ObjectName ObjectReference() {
   ObjectName name, nameExt = null;
    name = ObjectName();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 151:
      mcc_consume_token(151);
      nameExt = ObjectName();
                                   name = name.Child(nameExt);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 151:
        mcc_consume_token(151);
        nameExt = ObjectName();
                                   name = name.Child(nameExt);
        break;
      default:
        mcc_la1[235] = mcc_gen;
        ;
        break;
      }
      break;
    default:
      mcc_la1[236] = mcc_gen;
      ;
      break;
    }
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case 174:
      mcc_consume_token(174);
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case 170:
        mcc_consume_token(170);
        break;
      case S_IDENTIFIER:
        TNSName();

        break;
      default:
        mcc_la1[237] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      mcc_la1[238] = mcc_gen;
      ;
      break;
    }
      {return lastObjectReference = name;}
    throw new Exception("Missing return statement in function");
  }

  public void OuterJoinExpression() {
    TableColumn();
    mcc_consume_token(154);
    mcc_consume_token(163);
    mcc_consume_token(155);
  }

  public TableSelectExpression SubQuery() {
  SelectStatement statement;
    statement = SelectStatement();
          {return statement.SelectExpression;}
    throw new Exception("Missing return statement in function");
  }

/** Expect an <S_IDENTIFIER> with the given value. */
  public void ID(String id) {
    mcc_consume_token(S_IDENTIFIER);
        if (!Regex.IsMatch(id, "(?i)")) {
            {throw new ParseException("Encountered " + token.image
                + " at line " + token.beginLine + ", column " + token.beginColumn + "."
                + "\nWas expecting: " + id);}
        }
  }

  private bool mcc_2_1(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_1(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(0, xla); }
  }

  private bool mcc_2_2(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_2(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(1, xla); }
  }

  private bool mcc_2_3(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_3(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(2, xla); }
  }

  private bool mcc_2_4(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_4(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(3, xla); }
  }

  private bool mcc_2_5(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_5(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(4, xla); }
  }

  private bool mcc_2_6(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_6(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(5, xla); }
  }

  private bool mcc_2_7(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_7(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(6, xla); }
  }

  private bool mcc_2_8(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_8(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(7, xla); }
  }

  private bool mcc_2_9(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_9(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(8, xla); }
  }

  private bool mcc_2_10(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_10(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(9, xla); }
  }

  private bool mcc_2_11(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_11(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(10, xla); }
  }

  private bool mcc_2_12(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_12(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(11, xla); }
  }

  private bool mcc_2_13(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_13(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(12, xla); }
  }

  private bool mcc_2_14(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_14(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(13, xla); }
  }

  private bool mcc_2_15(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_15(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(14, xla); }
  }

  private bool mcc_2_16(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_16(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(15, xla); }
  }

  private bool mcc_2_17(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_17(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(16, xla); }
  }

  private bool mcc_2_18(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_18(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(17, xla); }
  }

  private bool mcc_2_19(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_19(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(18, xla); }
  }

  private bool mcc_2_20(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_20(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(19, xla); }
  }

  private bool mcc_2_21(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_21(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(20, xla); }
  }

  private bool mcc_2_22(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_22(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(21, xla); }
  }

  private bool mcc_2_23(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_23(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(22, xla); }
  }

  private bool mcc_2_24(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_24(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(23, xla); }
  }

  private bool mcc_2_25(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_25(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(24, xla); }
  }

  private bool mcc_2_26(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_26(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(25, xla); }
  }

  private bool mcc_2_27(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_27(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(26, xla); }
  }

  private bool mcc_2_28(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_28(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(27, xla); }
  }

  private bool mcc_2_29(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_29(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(28, xla); }
  }

  private bool mcc_2_30(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_30(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(29, xla); }
  }

  private bool mcc_2_31(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_31(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(30, xla); }
  }

  private bool mcc_2_32(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_32(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(31, xla); }
  }

  private bool mcc_2_33(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_33(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(32, xla); }
  }

  private bool mcc_2_34(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_34(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(33, xla); }
  }

  private bool mcc_2_35(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_35(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(34, xla); }
  }

  private bool mcc_2_36(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_36(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(35, xla); }
  }

  private bool mcc_2_37(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_37(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(36, xla); }
  }

  private bool mcc_2_38(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_38(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(37, xla); }
  }

  private bool mcc_2_39(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_39(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(38, xla); }
  }

  private bool mcc_2_40(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_40(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(39, xla); }
  }

  private bool mcc_2_41(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_41(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(40, xla); }
  }

  private bool mcc_2_42(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_42(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(41, xla); }
  }

  private bool mcc_2_43(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_43(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(42, xla); }
  }

  private bool mcc_2_44(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_44(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(43, xla); }
  }

  private bool mcc_2_45(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_45(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(44, xla); }
  }

  private bool mcc_2_46(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_46(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(45, xla); }
  }

  private bool mcc_2_47(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_47(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(46, xla); }
  }

  private bool mcc_2_48(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_48(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(47, xla); }
  }

  private bool mcc_2_49(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_49(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(48, xla); }
  }

  private bool mcc_2_50(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_50(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(49, xla); }
  }

  private bool mcc_2_51(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_51(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(50, xla); }
  }

  private bool mcc_2_52(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_52(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(51, xla); }
  }

  private bool mcc_2_53(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_53(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(52, xla); }
  }

  private bool mcc_2_54(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_54(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(53, xla); }
  }

  private bool mcc_2_55(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_55(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(54, xla); }
  }

  private bool mcc_2_56(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_56(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(55, xla); }
  }

  private bool mcc_2_57(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_57(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(56, xla); }
  }

  private bool mcc_2_58(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_58(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(57, xla); }
  }

  private bool mcc_2_59(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_59(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(58, xla); }
  }

  private bool mcc_3R_173() {
    if (mcc_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private bool mcc_3R_172() {
    if (mcc_scan_token(S_NUMBER)) return true;
    return false;
  }

  private bool mcc_3R_162() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_172()) {
    mcc_scanpos = xsp;
    if (mcc_3R_173()) {
    mcc_scanpos = xsp;
    if (mcc_3R_174()) {
    mcc_scanpos = xsp;
    if (mcc_3R_175()) {
    mcc_scanpos = xsp;
    if (mcc_3R_176()) {
    mcc_scanpos = xsp;
    if (mcc_3R_177()) {
    mcc_scanpos = xsp;
    if (mcc_3_50()) {
    mcc_scanpos = xsp;
    if (mcc_3R_178()) {
    mcc_scanpos = xsp;
    if (mcc_3R_179()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = seeAnalyticFunction();
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_180()) {
    mcc_scanpos = xsp;
    if (mcc_3R_181()) {
    mcc_scanpos = xsp;
    if (mcc_3R_182()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_171() {
    if (mcc_scan_token(164)) return true;
    return false;
  }

  private bool mcc_3_12() {
    if (mcc_3R_56()) return true;
    return false;
  }

  private bool mcc_3R_161() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(163)) {
    mcc_scanpos = xsp;
    if (mcc_3R_171()) return true;
    }
    return false;
  }

  private bool mcc_3R_144() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_161()) mcc_scanpos = xsp;
    if (mcc_3R_162()) return true;
    return false;
  }

  private bool mcc_3R_146() {
    if (mcc_scan_token(168)) return true;
    if (mcc_3R_144()) return true;
    return false;
  }

  private bool mcc_3_47() {
    if (mcc_3R_74()) return true;
    return false;
  }

  private bool mcc_3R_127() {
    if (mcc_3R_144()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_146()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_147() {
    if (mcc_scan_token(166)) return true;
    return false;
  }

  private bool mcc_3R_129() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_147()) {
    mcc_scanpos = xsp;
    if (mcc_3R_148()) return true;
    }
    if (mcc_3R_127()) return true;
    return false;
  }

  private bool mcc_3R_103() {
    if (mcc_3R_127()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_129()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_130() {
    if (mcc_scan_token(163)) return true;
    return false;
  }

  private bool mcc_3R_107() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_130()) {
    mcc_scanpos = xsp;
    if (mcc_3R_131()) {
    mcc_scanpos = xsp;
    if (mcc_3R_132()) return true;
    }
    }
    if (mcc_3R_103()) return true;
    return false;
  }

  private bool mcc_3R_321() {
    if (mcc_scan_token(K_ANY)) return true;
    return false;
  }

  private bool mcc_3R_66() {
    if (mcc_3R_103()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_107()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_46() {
    if (mcc_3R_67()) return true;
    return false;
  }

  private bool mcc_3R_108() {
    if (mcc_scan_token(K_NOT)) return true;
    return false;
  }

  private bool mcc_3R_73() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_108()) mcc_scanpos = xsp;
    if (mcc_scan_token(K_LIKE)) return true;
    if (mcc_3R_66()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_312()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_42() {
    if (mcc_scan_token(K_SELECT)) return true;
    return false;
  }

  private bool mcc_3R_72() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(74)) mcc_scanpos = xsp;
    if (mcc_scan_token(K_BETWEEN)) return true;
    if (mcc_3R_66()) return true;
    if (mcc_scan_token(K_AND)) return true;
    if (mcc_3R_66()) return true;
    return false;
  }

  private bool mcc_3_43() {
    if (mcc_3R_74()) return true;
    return false;
  }

  private bool mcc_3R_320() {
    if (mcc_scan_token(K_ALL)) return true;
    return false;
  }

  private bool mcc_3R_316() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_320()) {
    mcc_scanpos = xsp;
    if (mcc_3R_321()) return true;
    }
    return false;
  }

  private bool mcc_3R_317() {
    if (mcc_3R_67()) return true;
    return false;
  }

  private bool mcc_3R_71() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(74)) mcc_scanpos = xsp;
    if (mcc_scan_token(K_IN)) return true;
    if (mcc_scan_token(154)) return true;
    xsp = mcc_scanpos;
    if (mcc_3_46()) {
    mcc_scanpos = xsp;
    if (mcc_3_47()) return true;
    }
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3_10() {
    if (mcc_3R_54()) return true;
    if (mcc_3R_55()) return true;
    return false;
  }

  private bool mcc_3_44() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(8)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(5)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(154)) return true;
    }
    }
    return false;
  }

  private bool mcc_3_45() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(91)) mcc_scanpos = xsp;
    if (mcc_3R_66()) return true;
    return false;
  }

  private bool mcc_3_11() {
    if (mcc_3R_54()) return true;
    if (mcc_3R_54()) return true;
    if (mcc_scan_token(K_INTO)) return true;
    return false;
  }

  private bool mcc_3R_311() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_316()) mcc_scanpos = xsp;
    if (mcc_scan_token(154)) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_317()) {
    mcc_scanpos = xsp;
    if (mcc_3_43()) return true;
    }
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_303() {
    if (mcc_3R_261()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_311()) {
    mcc_scanpos = xsp;
    if (mcc_3_45()) return true;
    }
    return false;
  }

  private bool mcc_3R_278() {
    if (mcc_scan_token(156)) return true;
    if (mcc_3R_56()) return true;
    return false;
  }

  private bool mcc_3R_74() {
    if (mcc_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_278()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_293() {
    if (mcc_3R_262()) return true;
    return false;
  }

  private bool mcc_3_41() {
    if (mcc_3R_73()) return true;
    return false;
  }

  private bool mcc_3_40() {
    if (mcc_3R_72()) return true;
    return false;
  }

  private bool mcc_3_37() {
    if (mcc_scan_token(154)) return true;
    if (mcc_3R_66()) return true;
    if (mcc_scan_token(156)) return true;
    return false;
  }

  private bool mcc_3_39() {
    if (mcc_3R_71()) return true;
    return false;
  }

  private bool mcc_3R_292() {
    if (mcc_3R_303()) return true;
    return false;
  }

  private bool mcc_3R_279() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_292()) {
    mcc_scanpos = xsp;
    if (mcc_3_39()) {
    mcc_scanpos = xsp;
    if (mcc_3_40()) {
    mcc_scanpos = xsp;
    if (mcc_3_41()) {
    mcc_scanpos = xsp;
    if (mcc_3R_293()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3_38() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(91)) mcc_scanpos = xsp;
    if (mcc_3R_66()) return true;
    return false;
  }

  private bool mcc_3R_106() {
    if (mcc_scan_token(154)) return true;
    if (mcc_3R_74()) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_70() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_106()) {
    mcc_scanpos = xsp;
    if (mcc_3_38()) return true;
    }
    xsp = mcc_scanpos;
    if (mcc_3R_279()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_328() {
    if (mcc_scan_token(156)) return true;
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3R_105() {
    if (mcc_scan_token(K_NOT)) return true;
    return false;
  }

  private bool mcc_3R_68() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_105()) mcc_scanpos = xsp;
    if (mcc_scan_token(K_EXISTS)) return true;
    if (mcc_scan_token(154)) return true;
    if (mcc_3R_60()) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3_9() {
    if (mcc_3R_53()) return true;
    return false;
  }

  private bool mcc_3R_69() {
    if (mcc_scan_token(K_NOT)) return true;
    return false;
  }

  private bool mcc_3R_53() {
    if (mcc_scan_token(K_FOR)) return true;
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    if (mcc_scan_token(K_IN)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(102)) mcc_scanpos = xsp;
    if (mcc_3R_55()) return true;
    if (mcc_scan_token(162)) return true;
    return false;
  }

  private bool mcc_3_36() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_69()) mcc_scanpos = xsp;
    if (mcc_3R_70()) return true;
    return false;
  }

  private bool mcc_3_35() {
    if (mcc_3R_68()) return true;
    return false;
  }

  private bool mcc_3R_119() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_35()) {
    mcc_scanpos = xsp;
    if (mcc_3_36()) return true;
    }
    return false;
  }

  private bool mcc_3R_233() {
    if (mcc_scan_token(K_AND)) return true;
    if (mcc_3R_119()) return true;
    return false;
  }

  private bool mcc_3R_325() {
    if (mcc_scan_token(K_OF)) return true;
    if (mcc_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_328()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_91() {
    if (mcc_3R_119()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_233()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_329() {
    if (mcc_scan_token(K_WAIT)) return true;
    if (mcc_3R_66()) return true;
    return false;
  }

  private bool mcc_3R_217() {
    if (mcc_scan_token(K_OR)) return true;
    if (mcc_3R_91()) return true;
    return false;
  }

  private bool mcc_3R_56() {
    if (mcc_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_217()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_326() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(75)) {
    mcc_scanpos = xsp;
    if (mcc_3R_329()) return true;
    }
    return false;
  }

  private bool mcc_3R_319() {
    if (mcc_scan_token(K_FOR)) return true;
    if (mcc_scan_token(K_UPDATE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_325()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_326()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_281() {
    if (mcc_scan_token(K_NULLS)) return true;
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_294() {
    if (mcc_scan_token(K_ASC)) return true;
    return false;
  }

  private bool mcc_3R_280() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_294()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(35)) return true;
    }
    return false;
  }

  private bool mcc_3R_265() {
    if (mcc_3R_66()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_280()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_281()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_266() {
    if (mcc_scan_token(156)) return true;
    if (mcc_3R_265()) return true;
    return false;
  }

  private bool mcc_3R_258() {
    if (mcc_scan_token(K_ORDER)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(113)) mcc_scanpos = xsp;
    if (mcc_scan_token(K_BY)) return true;
    if (mcc_3R_265()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_266()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_253() {
    if (mcc_scan_token(K_HAVING)) return true;
    if (mcc_3R_56()) return true;
    return false;
  }

  private bool mcc_3R_116() {
    if (mcc_3R_137()) return true;
    return false;
  }

  private bool mcc_3R_89() {
    if (mcc_scan_token(154)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_116()) mcc_scanpos = xsp;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_254() {
    if (mcc_scan_token(K_GROUP)) return true;
    if (mcc_scan_token(K_BY)) return true;
    if (mcc_3R_74()) return true;
    return false;
  }

  private bool mcc_3R_252() {
    if (mcc_scan_token(K_START)) return true;
    if (mcc_scan_token(K_WITH)) return true;
    if (mcc_3R_56()) return true;
    return false;
  }

  private bool mcc_3R_251() {
    if (mcc_scan_token(K_START)) return true;
    if (mcc_scan_token(K_WITH)) return true;
    if (mcc_3R_56()) return true;
    return false;
  }

  private bool mcc_3R_230() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_251()) mcc_scanpos = xsp;
    if (mcc_scan_token(K_CONNECT)) return true;
    if (mcc_scan_token(K_BY)) return true;
    if (mcc_3R_56()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_252()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_88() {
    if (mcc_3R_84()) return true;
    return false;
  }

  private bool mcc_3R_229() {
    if (mcc_scan_token(K_WHERE)) return true;
    if (mcc_3R_56()) return true;
    return false;
  }

  private bool mcc_3R_52() {
    if (mcc_3R_88()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_89()) mcc_scanpos = xsp;
    if (mcc_scan_token(153)) return true;
    return false;
  }

  private bool mcc_3R_306() {
    if (mcc_scan_token(154)) return true;
    if (mcc_scan_token(163)) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_310() {
    if (mcc_3R_291()) return true;
    return false;
  }

  private bool mcc_3R_309() {
    if (mcc_3R_291()) return true;
    return false;
  }

  private bool mcc_3R_302() {
    if (mcc_scan_token(K_RIGHT)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(178)) mcc_scanpos = xsp;
    if (mcc_3R_54()) return true;
    if (mcc_3R_276()) return true;
    if (mcc_scan_token(K_ON)) return true;
    if (mcc_3R_56()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_310()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_308() {
    if (mcc_3R_291()) return true;
    return false;
  }

  private bool mcc_3R_301() {
    if (mcc_scan_token(K_LEFT)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(178)) mcc_scanpos = xsp;
    if (mcc_3R_54()) return true;
    if (mcc_3R_276()) return true;
    if (mcc_scan_token(K_ON)) return true;
    if (mcc_3R_56()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_309()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_307() {
    if (mcc_3R_227()) return true;
    return false;
  }

  private bool mcc_3R_300() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(60)) mcc_scanpos = xsp;
    if (mcc_3R_54()) return true;
    if (mcc_3R_276()) return true;
    if (mcc_scan_token(K_ON)) return true;
    if (mcc_3R_56()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_308()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_299() {
    if (mcc_scan_token(156)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_307()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_291() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_299()) {
    mcc_scanpos = xsp;
    if (mcc_3R_300()) {
    mcc_scanpos = xsp;
    if (mcc_3R_301()) {
    mcc_scanpos = xsp;
    if (mcc_3R_302()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_298() {
    if (mcc_scan_token(K_TABLE)) return true;
    if (mcc_scan_token(154)) return true;
    if (mcc_3R_66()) return true;
    if (mcc_scan_token(155)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_306()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_8() {
    if (mcc_3R_52()) return true;
    return false;
  }

  private bool mcc_3_7() {
    if (mcc_3R_51()) return true;
    if (mcc_scan_token(157)) return true;
    return false;
  }

  private bool mcc_3R_290() {
    if (mcc_3R_65()) return true;
    return false;
  }

  private bool mcc_3R_289() {
    if (mcc_3R_115()) return true;
    return false;
  }

  private bool mcc_3R_288() {
    if (mcc_scan_token(154)) return true;
    if (mcc_3R_227()) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3_34() {
    if (mcc_scan_token(154)) return true;
    if (mcc_3R_67()) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_287() {
    if (mcc_3R_298()) return true;
    return false;
  }

  private bool mcc_3R_286() {
    if (mcc_3R_297()) return true;
    return false;
  }

  private bool mcc_3R_276() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_286()) {
    mcc_scanpos = xsp;
    if (mcc_3R_287()) {
    mcc_scanpos = xsp;
    if (mcc_3_34()) {
    mcc_scanpos = xsp;
    if (mcc_3R_288()) {
    mcc_scanpos = xsp;
    if (mcc_3R_289()) return true;
    }
    }
    }
    }
    xsp = mcc_scanpos;
    if (mcc_3R_290()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_114() {
    if (mcc_scan_token(151)) return true;
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3R_277() {
    if (mcc_3R_291()) return true;
    return false;
  }

  private bool mcc_3R_263() {
    if (mcc_3R_276()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_277()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_250() {
    if (mcc_3R_263()) return true;
    return false;
  }

  private bool mcc_3R_259() {
    if (mcc_3R_267()) return true;
    return false;
  }

  private bool mcc_3R_227() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_249()) {
    mcc_scanpos = xsp;
    if (mcc_3R_250()) return true;
    }
    return false;
  }

  private bool mcc_3R_228() {
    if (mcc_scan_token(156)) return true;
    if (mcc_3R_227()) return true;
    return false;
  }

  private bool mcc_3R_249() {
    if (mcc_scan_token(K_ONLY)) return true;
    if (mcc_scan_token(154)) return true;
    if (mcc_3R_263()) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_86() {
    if (mcc_3R_115()) return true;
    return false;
  }

  private bool mcc_3R_85() {
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_114()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_248() {
    if (mcc_scan_token(156)) return true;
    if (mcc_3R_51()) return true;
    return false;
  }

  private bool mcc_3R_98() {
    if (mcc_scan_token(K_FROM)) return true;
    if (mcc_3R_227()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_228()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_264() {
    if (mcc_scan_token(156)) return true;
    if (mcc_3R_56()) return true;
    return false;
  }

  private bool mcc_3R_87() {
    if (mcc_scan_token(154)) return true;
    if (mcc_3R_55()) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3_32() {
    if (mcc_3R_66()) return true;
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_51() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_85()) {
    mcc_scanpos = xsp;
    if (mcc_3R_86()) return true;
    }
    xsp = mcc_scanpos;
    if (mcc_3R_87()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_296() {
    if (mcc_scan_token(K_CURRENT)) return true;
    if (mcc_scan_token(K_ROW)) return true;
    return false;
  }

  private bool mcc_3_31() {
    if (mcc_3R_66()) return true;
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_295() {
    if (mcc_scan_token(K_CURRENT)) return true;
    if (mcc_scan_token(K_ROW)) return true;
    return false;
  }

  private bool mcc_3R_244() {
    if (mcc_3R_258()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_259()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_122() {
    if (mcc_scan_token(K_INTO)) return true;
    if (mcc_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_248()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_196() {
    if (mcc_scan_token(K_WHEN)) return true;
    return false;
  }

  private bool mcc_3R_283() {
    if (mcc_scan_token(K_BETWEEN)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_295()) {
    mcc_scanpos = xsp;
    if (mcc_3_31()) return true;
    }
    if (mcc_scan_token(K_AND)) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_296()) {
    mcc_scanpos = xsp;
    if (mcc_3_32()) return true;
    }
    return false;
  }

  private bool mcc_3_33() {
    if (mcc_3R_66()) return true;
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_282() {
    if (mcc_scan_token(K_CURRENT)) return true;
    if (mcc_scan_token(K_ROW)) return true;
    return false;
  }

  private bool mcc_3R_267() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(106)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(95)) return true;
    }
    xsp = mcc_scanpos;
    if (mcc_3R_282()) {
    mcc_scanpos = xsp;
    if (mcc_3_33()) {
    mcc_scanpos = xsp;
    if (mcc_3R_283()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_205() {
    if (mcc_scan_token(K_OVER)) return true;
    if (mcc_scan_token(154)) return true;
    if (mcc_3R_222()) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_256() {
    if (mcc_scan_token(156)) return true;
    if (mcc_scan_token(S_NUMBER)) return true;
    return false;
  }

  private bool mcc_3R_257() {
    if (mcc_scan_token(K_PARTITION)) return true;
    if (mcc_scan_token(K_BY)) return true;
    if (mcc_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_264()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_243() {
    if (mcc_3R_257()) return true;
    return false;
  }

  private bool mcc_3R_222() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_243()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_244()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_255() {
    if (mcc_3R_253()) return true;
    return false;
  }

  private bool mcc_3R_198() {
    if (mcc_3R_199()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_205()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_221() {
    if (mcc_scan_token(K_BOOLEAN)) return true;
    return false;
  }

  private bool mcc_3R_220() {
    if (mcc_scan_token(K_BINARY_INTEGER)) return true;
    return false;
  }

  private bool mcc_3R_241() {
    if (mcc_scan_token(K_FLOAT)) return true;
    return false;
  }

  private bool mcc_3R_219() {
    if (mcc_scan_token(K_DATE)) return true;
    return false;
  }

  private bool mcc_3R_240() {
    if (mcc_scan_token(K_REAL)) return true;
    return false;
  }

  private bool mcc_3R_239() {
    if (mcc_scan_token(K_NATURAL)) return true;
    return false;
  }

  private bool mcc_3R_195() {
    if (mcc_scan_token(K_RETURNING)) return true;
    return false;
  }

  private bool mcc_3R_238() {
    if (mcc_scan_token(K_NUMBER)) return true;
    return false;
  }

  private bool mcc_3R_242() {
    if (mcc_scan_token(154)) return true;
    if (mcc_scan_token(S_NUMBER)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_256()) mcc_scanpos = xsp;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_237() {
    if (mcc_scan_token(K_INTEGER)) return true;
    return false;
  }

  private bool mcc_3R_194() {
    if (mcc_3R_65()) return true;
    return false;
  }

  private bool mcc_3R_236() {
    if (mcc_scan_token(K_VARCHAR2)) return true;
    return false;
  }

  private bool mcc_3R_235() {
    if (mcc_scan_token(K_VARCHAR)) return true;
    return false;
  }

  private bool mcc_3R_170() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_194()) {
    mcc_scanpos = xsp;
    if (mcc_3R_195()) {
    mcc_scanpos = xsp;
    if (mcc_3R_196()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_49() {
    if (mcc_scan_token(159)) return true;
    return false;
  }

  private bool mcc_3R_234() {
    if (mcc_scan_token(K_CHAR)) return true;
    return false;
  }

  private bool mcc_3_30() {
    if (mcc_3R_66()) return true;
    return false;
  }

  private bool mcc_3R_160() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(9)) mcc_scanpos = xsp;
    if (mcc_3R_170()) return true;
    return false;
  }

  private bool mcc_3_29() {
    if (mcc_3R_65()) return true;
    if (mcc_scan_token(151)) return true;
    if (mcc_3R_65()) return true;
    if (mcc_scan_token(177)) return true;
    return false;
  }

  private bool mcc_3R_204() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_218()) {
    mcc_scanpos = xsp;
    if (mcc_3R_219()) {
    mcc_scanpos = xsp;
    if (mcc_3R_220()) {
    mcc_scanpos = xsp;
    if (mcc_3R_221()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3_28() {
    if (mcc_3R_65()) return true;
    if (mcc_scan_token(177)) return true;
    return false;
  }

  private bool mcc_3R_218() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_234()) {
    mcc_scanpos = xsp;
    if (mcc_3R_235()) {
    mcc_scanpos = xsp;
    if (mcc_3R_236()) {
    mcc_scanpos = xsp;
    if (mcc_3R_237()) {
    mcc_scanpos = xsp;
    if (mcc_3R_238()) {
    mcc_scanpos = xsp;
    if (mcc_3R_239()) {
    mcc_scanpos = xsp;
    if (mcc_3R_240()) {
    mcc_scanpos = xsp;
    if (mcc_3R_241()) return true;
    }
    }
    }
    }
    }
    }
    }
    xsp = mcc_scanpos;
    if (mcc_3R_242()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_64() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_28()) {
    mcc_scanpos = xsp;
    if (mcc_3_29()) {
    mcc_scanpos = xsp;
    if (mcc_3_30()) return true;
    }
    }
    xsp = mcc_scanpos;
    if (mcc_3R_160()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_27() {
    if (mcc_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_143()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_6() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(158)) return true;
    return false;
  }

  private bool mcc_3R_143() {
    if (mcc_scan_token(156)) return true;
    if (mcc_3R_64()) return true;
    return false;
  }

  private bool mcc_3R_120() {
    if (mcc_scan_token(K_DISTINCT)) return true;
    return false;
  }

  private bool mcc_3R_121() {
    if (mcc_scan_token(166)) return true;
    return false;
  }

  private bool mcc_3R_96() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_121()) {
    mcc_scanpos = xsp;
    if (mcc_3_27()) return true;
    }
    return false;
  }

  private bool mcc_3R_232() {
    if (mcc_3R_254()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_255()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_95() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(5)) {
    mcc_scanpos = xsp;
    if (mcc_3R_120()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(124)) return true;
    }
    }
    return false;
  }

  private bool mcc_3_5() {
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(158)) {
    mcc_scanpos = xsp;
    if (mcc_3R_49()) return true;
    }
    return false;
  }

  private bool mcc_3R_216() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_231()) {
    mcc_scanpos = xsp;
    if (mcc_3R_232()) return true;
    }
    return false;
  }

  private bool mcc_3R_231() {
    if (mcc_3R_253()) return true;
    if (mcc_3R_254()) return true;
    return false;
  }

  private bool mcc_3R_215() {
    if (mcc_3R_230()) return true;
    return false;
  }

  private bool mcc_3R_214() {
    if (mcc_3R_229()) return true;
    return false;
  }

  private bool mcc_3R_97() {
    if (mcc_3R_122()) return true;
    return false;
  }

  private bool mcc_3R_60() {
    if (mcc_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_95()) mcc_scanpos = xsp;
    if (mcc_3R_96()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_97()) mcc_scanpos = xsp;
    if (mcc_3R_98()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_214()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_215()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_216()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_164() {
    if (mcc_scan_token(154)) return true;
    if (mcc_3R_67()) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_327() {
    if (mcc_scan_token(K_ALL)) return true;
    return false;
  }

  private bool mcc_3R_163() {
    if (mcc_3R_60()) return true;
    return false;
  }

  private bool mcc_3R_324() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(72)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(176)) return true;
    }
    return false;
  }

  private bool mcc_3R_145() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_163()) {
    mcc_scanpos = xsp;
    if (mcc_3R_164()) return true;
    }
    return false;
  }

  private bool mcc_3R_323() {
    if (mcc_scan_token(K_INTERSECT)) return true;
    return false;
  }

  private bool mcc_3R_322() {
    if (mcc_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_327()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_4() {
    if (mcc_3R_48()) return true;
    return false;
  }

  private bool mcc_3R_318() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_322()) {
    mcc_scanpos = xsp;
    if (mcc_3R_323()) {
    mcc_scanpos = xsp;
    if (mcc_3R_324()) return true;
    }
    }
    if (mcc_3R_145()) return true;
    return false;
  }

  private bool mcc_3R_128() {
    if (mcc_3R_145()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_318()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_83() {
    if (mcc_scan_token(K_FUNCTION)) return true;
    return false;
  }

  private bool mcc_3R_315() {
    if (mcc_scan_token(K_SKIP)) return true;
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3_3() {
    if (mcc_3R_48()) return true;
    return false;
  }

  private bool mcc_3R_314() {
    if (mcc_3R_319()) return true;
    return false;
  }

  private bool mcc_3R_313() {
    if (mcc_3R_258()) return true;
    return false;
  }

  private bool mcc_3R_104() {
    if (mcc_3R_128()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_313()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_314()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_315()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_153() {
    if (mcc_scan_token(156)) return true;
    if (mcc_3R_152()) return true;
    return false;
  }

  private bool mcc_3R_82() {
    if (mcc_scan_token(K_PROCEDURE)) return true;
    return false;
  }

  private bool mcc_3_26() {
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    if (mcc_scan_token(175)) return true;
    return false;
  }

  private bool mcc_3R_152() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_26()) mcc_scanpos = xsp;
    if (mcc_3R_167()) return true;
    return false;
  }

  private bool mcc_3R_80() {
    if (mcc_scan_token(K_PRAGMA)) return true;
    return false;
  }

  private bool mcc_3R_137() {
    if (mcc_3R_152()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_153()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_79() {
    if (mcc_scan_token(K_CURSOR)) return true;
    return false;
  }

  private bool mcc_3R_81() {
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3R_166() {
    if (mcc_scan_token(151)) return true;
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3R_47() {
    if (mcc_3R_83()) return true;
    return false;
  }

  private bool mcc_3_2() {
    Token xsp;
    xsp = mcc_scanpos;
    lookingAhead = true;
    mcc_semLA = !seeTYPE();
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_46()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = !seeTYPE();
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_47()) return true;
    }
    return false;
  }

  private bool mcc_3R_46() {
    if (mcc_3R_82()) return true;
    return false;
  }

  private bool mcc_3R_45() {
    if (mcc_3R_81()) return true;
    return false;
  }

  private bool mcc_3R_305() {
    if (mcc_scan_token(174)) return true;
    if (mcc_3R_149()) return true;
    return false;
  }

  private bool mcc_3R_44() {
    if (mcc_3R_80()) return true;
    return false;
  }

  private bool mcc_3R_304() {
    if (mcc_scan_token(151)) return true;
    if (mcc_3R_65()) return true;
    return false;
  }

  private bool mcc_3R_43() {
    if (mcc_3R_79()) return true;
    return false;
  }

  private bool mcc_3R_42() {
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_297() {
    if (mcc_3R_65()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_304()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_305()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_1() {
    Token xsp;
    xsp = mcc_scanpos;
    lookingAhead = true;
    mcc_semLA = seeTYPE();
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_42()) {
    mcc_scanpos = xsp;
    if (mcc_3R_43()) {
    mcc_scanpos = xsp;
    if (mcc_3R_44()) {
    mcc_scanpos = xsp;
    if (mcc_3R_45()) return true;
    }
    }
    }
    return false;
  }

  private bool mcc_3R_48() {
    Token xsp;
    if (mcc_3_1()) return true;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3_1()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_150() {
    if (mcc_scan_token(S_NUMBER)) return true;
    return false;
  }

  private bool mcc_3R_151() {
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_166()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_136() {
    if (mcc_scan_token(150)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_150()) {
    mcc_scanpos = xsp;
    if (mcc_3R_151()) return true;
    }
    return false;
  }

  private bool mcc_3R_272() {
    if (mcc_scan_token(173)) return true;
    return false;
  }

  private bool mcc_3R_135() {
    if (mcc_scan_token(S_BIND)) return true;
    return false;
  }

  private bool mcc_3_25() {
    if (mcc_scan_token(173)) return true;
    if (mcc_scan_token(152)) return true;
    return false;
  }

  private bool mcc_3_24() {
    if (mcc_scan_token(173)) return true;
    if (mcc_scan_token(172)) return true;
    return false;
  }

  private bool mcc_3R_271() {
    if (mcc_scan_token(172)) return true;
    return false;
  }

  private bool mcc_3_23() {
    if (mcc_scan_token(172)) return true;
    if (mcc_scan_token(152)) return true;
    return false;
  }

  private bool mcc_3R_270() {
    if (mcc_scan_token(171)) return true;
    return false;
  }

  private bool mcc_3R_268() {
    if (mcc_scan_token(152)) return true;
    return false;
  }

  private bool mcc_3R_269() {
    if (mcc_scan_token(170)) return true;
    if (mcc_scan_token(152)) return true;
    return false;
  }

  private bool mcc_3R_261() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_268()) {
    mcc_scanpos = xsp;
    if (mcc_3R_269()) {
    mcc_scanpos = xsp;
    if (mcc_3R_270()) {
    mcc_scanpos = xsp;
    if (mcc_3_23()) {
    mcc_scanpos = xsp;
    if (mcc_3R_271()) {
    mcc_scanpos = xsp;
    if (mcc_3_24()) {
    mcc_scanpos = xsp;
    if (mcc_3_25()) {
    mcc_scanpos = xsp;
    if (mcc_3R_272()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_115() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_135()) {
    mcc_scanpos = xsp;
    if (mcc_3R_136()) return true;
    }
    return false;
  }

  private bool mcc_3R_165() {
    if (mcc_scan_token(151)) return true;
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3R_149() {
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_165()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_102() {
    if (mcc_scan_token(S_QUOTED_IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3R_101() {
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3R_65() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_101()) {
    mcc_scanpos = xsp;
    if (mcc_3R_102()) return true;
    }
    return false;
  }

  private bool mcc_3R_50() {
    if (mcc_3R_84()) return true;
    return false;
  }

  private bool mcc_3_22() {
    if (mcc_3R_63()) return true;
    if (mcc_scan_token(154)) return true;
    return false;
  }

  private bool mcc_3_20() {
    if (mcc_3R_62()) return true;
    return false;
  }

  private bool mcc_3R_193() {
    if (mcc_3R_84()) return true;
    return false;
  }

  private bool mcc_3R_192() {
    if (mcc_3R_199()) return true;
    return false;
  }

  private bool mcc_3_21() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(144)) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(116)) return true;
    }
    if (mcc_scan_token(169)) return true;
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3_18() {
    if (mcc_3R_60()) return true;
    return false;
  }

  private bool mcc_3R_191() {
    if (mcc_3R_62()) return true;
    return false;
  }

  private bool mcc_3R_211() {
    if (mcc_3R_167()) return true;
    return false;
  }

  private bool mcc_3_19() {
    if (mcc_3R_61()) return true;
    return false;
  }

  private bool mcc_3R_190() {
    if (mcc_3R_115()) return true;
    return false;
  }

  private bool mcc_3R_189() {
    if (mcc_scan_token(154)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_18()) {
    mcc_scanpos = xsp;
    if (mcc_3R_211()) return true;
    }
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_188() {
    if (mcc_3R_197()) return true;
    return false;
  }

  private bool mcc_3R_187() {
    if (mcc_scan_token(K_NULL)) return true;
    return false;
  }

  private bool mcc_3R_185() {
    if (mcc_scan_token(S_NUMBER)) return true;
    return false;
  }

  private bool mcc_3R_186() {
    if (mcc_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private bool mcc_3R_274() {
    if (mcc_scan_token(K_ESCAPE)) return true;
    if (mcc_3R_55()) return true;
    return false;
  }

  private bool mcc_3R_169() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_185()) {
    mcc_scanpos = xsp;
    if (mcc_3R_186()) {
    mcc_scanpos = xsp;
    if (mcc_3R_187()) {
    mcc_scanpos = xsp;
    if (mcc_3R_188()) {
    mcc_scanpos = xsp;
    if (mcc_3R_189()) {
    mcc_scanpos = xsp;
    if (mcc_3R_190()) {
    mcc_scanpos = xsp;
    if (mcc_3_19()) {
    mcc_scanpos = xsp;
    if (mcc_3R_191()) {
    mcc_scanpos = xsp;
    if (mcc_3_21()) {
    mcc_scanpos = xsp;
    if (mcc_3R_192()) {
    mcc_scanpos = xsp;
    if (mcc_3R_193()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_168() {
    if (mcc_scan_token(164)) return true;
    return false;
  }

  private bool mcc_3R_159() {
    if (mcc_3R_169()) return true;
    return false;
  }

  private bool mcc_3R_142() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_158()) {
    mcc_scanpos = xsp;
    if (mcc_3R_159()) return true;
    }
    return false;
  }

  private bool mcc_3R_158() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(163)) {
    mcc_scanpos = xsp;
    if (mcc_3R_168()) return true;
    }
    if (mcc_3R_169()) return true;
    return false;
  }

  private bool mcc_3R_154() {
    if (mcc_scan_token(168)) return true;
    if (mcc_3R_142()) return true;
    return false;
  }

  private bool mcc_3R_157() {
    if (mcc_3R_54()) return true;
    return false;
  }

  private bool mcc_3R_118() {
    if (mcc_3R_142()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_154()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_156() {
    if (mcc_scan_token(167)) return true;
    return false;
  }

  private bool mcc_3R_155() {
    if (mcc_scan_token(166)) return true;
    return false;
  }

  private bool mcc_3R_138() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_155()) {
    mcc_scanpos = xsp;
    if (mcc_3R_156()) {
    mcc_scanpos = xsp;
    if (mcc_3R_157()) return true;
    }
    }
    if (mcc_3R_118()) return true;
    return false;
  }

  private bool mcc_3R_90() {
    if (mcc_3R_118()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_138()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_141() {
    if (mcc_scan_token(165)) return true;
    return false;
  }

  private bool mcc_3R_140() {
    if (mcc_scan_token(164)) return true;
    return false;
  }

  private bool mcc_3R_139() {
    if (mcc_scan_token(163)) return true;
    return false;
  }

  private bool mcc_3R_117() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_139()) {
    mcc_scanpos = xsp;
    if (mcc_3R_140()) {
    mcc_scanpos = xsp;
    if (mcc_3R_141()) return true;
    }
    }
    if (mcc_3R_90()) return true;
    return false;
  }

  private bool mcc_3R_55() {
    if (mcc_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_117()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_275() {
    if (mcc_scan_token(K_NOT)) return true;
    return false;
  }

  private bool mcc_3R_54() {
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3R_262() {
    if (mcc_scan_token(K_IS)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_275()) mcc_scanpos = xsp;
    if (mcc_scan_token(K_NULL)) return true;
    return false;
  }

  private bool mcc_3R_67() {
    if (mcc_3R_104()) return true;
    return false;
  }

  private bool mcc_3R_134() {
    if (mcc_3R_149()) return true;
    return false;
  }

  private bool mcc_3R_94() {
    if (mcc_scan_token(K_NOT)) return true;
    return false;
  }

  private bool mcc_3R_59() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_94()) mcc_scanpos = xsp;
    if (mcc_scan_token(K_LIKE)) return true;
    if (mcc_3R_55()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_274()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_75() {
    if (mcc_3R_50()) return true;
    if (mcc_scan_token(154)) return true;
    if (mcc_scan_token(163)) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_113() {
    if (mcc_scan_token(174)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_scan_token(170)) {
    mcc_scanpos = xsp;
    if (mcc_3R_134()) return true;
    }
    return false;
  }

  private bool mcc_3R_133() {
    if (mcc_scan_token(151)) return true;
    if (mcc_3R_65()) return true;
    return false;
  }

  private bool mcc_3R_93() {
    if (mcc_scan_token(K_NOT)) return true;
    return false;
  }

  private bool mcc_3R_112() {
    if (mcc_scan_token(151)) return true;
    if (mcc_3R_65()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_133()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3_58() {
    if (mcc_3R_66()) return true;
    return false;
  }

  private bool mcc_3R_58() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_93()) mcc_scanpos = xsp;
    if (mcc_scan_token(K_BETWEEN)) return true;
    if (mcc_3R_55()) return true;
    if (mcc_scan_token(K_AND)) return true;
    if (mcc_3R_55()) return true;
    return false;
  }

  private bool mcc_3R_84() {
    if (mcc_3R_65()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_112()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_113()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_260() {
    if (mcc_scan_token(K_FROM)) return true;
    if (mcc_3R_66()) return true;
    return false;
  }

  private bool mcc_3R_92() {
    if (mcc_scan_token(K_NOT)) return true;
    return false;
  }

  private bool mcc_3R_57() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_92()) mcc_scanpos = xsp;
    if (mcc_scan_token(K_IN)) return true;
    if (mcc_scan_token(154)) return true;
    if (mcc_3R_273()) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_224() {
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private bool mcc_3R_285() {
    if (mcc_scan_token(156)) return true;
    if (mcc_3R_167()) return true;
    return false;
  }

  private bool mcc_3_59() {
    if (mcc_3R_66()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_260()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_245() {
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_58()) mcc_scanpos = xsp;
    if (mcc_scan_token(K_FROM)) return true;
    if (mcc_3R_66()) return true;
    return false;
  }

  private bool mcc_3R_273() {
    if (mcc_3R_167()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_285()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_223() {
    if (mcc_scan_token(154)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    lookingAhead = true;
    mcc_semLA = Regex.IsMatch(GetToken(1).image, "(?i)LEADING|TRAILING|BOTH");
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_245()) {
    mcc_scanpos = xsp;
    if (mcc_3_59()) return true;
    }
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_247() {
    if (mcc_3R_262()) return true;
    return false;
  }

  private bool mcc_3R_111() {
    if (mcc_scan_token(K_DISTINCT)) return true;
    return false;
  }

  private bool mcc_3_17() {
    if (mcc_3R_59()) return true;
    return false;
  }

  private bool mcc_3_16() {
    if (mcc_3R_58()) return true;
    return false;
  }

  private bool mcc_3R_126() {
    if (mcc_scan_token(154)) return true;
    if (mcc_scan_token(S_NUMBER)) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3_15() {
    if (mcc_3R_57()) return true;
    return false;
  }

  private bool mcc_3R_124() {
    if (mcc_scan_token(154)) return true;
    if (mcc_scan_token(S_NUMBER)) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3_57() {
    if (mcc_scan_token(S_IDENTIFIER)) return true;
    if (mcc_scan_token(175)) return true;
    return false;
  }

  private bool mcc_3R_109() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_57()) mcc_scanpos = xsp;
    if (mcc_3R_56()) return true;
    return false;
  }

  private bool mcc_3R_226() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_246()) {
    mcc_scanpos = xsp;
    if (mcc_3_15()) {
    mcc_scanpos = xsp;
    if (mcc_3_16()) {
    mcc_scanpos = xsp;
    if (mcc_3_17()) {
    mcc_scanpos = xsp;
    if (mcc_3R_247()) return true;
    }
    }
    }
    }
    return false;
  }

  private bool mcc_3R_246() {
    if (mcc_3R_261()) return true;
    if (mcc_3R_55()) return true;
    return false;
  }

  private bool mcc_3R_284() {
    if (mcc_scan_token(156)) return true;
    if (mcc_3R_109()) return true;
    return false;
  }

  private bool mcc_3R_210() {
    if (mcc_3R_55()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_226()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_76() {
    if (mcc_3R_109()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_284()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_209() {
    if (mcc_scan_token(K_NOT)) return true;
    return false;
  }

  private bool mcc_3R_200() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_209()) mcc_scanpos = xsp;
    if (mcc_3R_210()) return true;
    return false;
  }

  private bool mcc_3R_201() {
    if (mcc_scan_token(K_AND)) return true;
    if (mcc_3R_200()) return true;
    return false;
  }

  private bool mcc_3R_63() {
    if (mcc_3R_84()) return true;
    return false;
  }

  private bool mcc_3R_110() {
    if (mcc_scan_token(K_ALL)) return true;
    return false;
  }

  private bool mcc_3R_77() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_110()) {
    mcc_scanpos = xsp;
    if (mcc_3R_111()) {
    mcc_scanpos = xsp;
    if (mcc_scan_token(124)) return true;
    }
    }
    return false;
  }

  private bool mcc_3_56() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_77()) mcc_scanpos = xsp;
    xsp = mcc_scanpos;
    if (mcc_3_55()) {
    mcc_scanpos = xsp;
    if (mcc_3R_78()) return true;
    }
    return false;
  }

  private bool mcc_3_55() {
    if (mcc_3R_76()) return true;
    return false;
  }

  private bool mcc_3R_78() {
    if (mcc_scan_token(166)) return true;
    return false;
  }

  private bool mcc_3R_183() {
    if (mcc_3R_200()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_201()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3R_225() {
    if (mcc_scan_token(154)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_56()) mcc_scanpos = xsp;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_184() {
    if (mcc_scan_token(K_OR)) return true;
    if (mcc_3R_183()) return true;
    return false;
  }

  private bool mcc_3R_208() {
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_225()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_207() {
    if (mcc_scan_token(154)) return true;
    if (mcc_3R_224()) return true;
    if (mcc_scan_token(K_FROM)) return true;
    if (mcc_3R_66()) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_206() {
    if (mcc_3R_223()) return true;
    return false;
  }

  private bool mcc_3R_167() {
    if (mcc_3R_183()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_184()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_14() {
    if (mcc_3R_56()) return true;
    return false;
  }

  private bool mcc_3R_125() {
    if (mcc_scan_token(154)) return true;
    if (mcc_scan_token(S_NUMBER)) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_199() {
    if (mcc_3R_63()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    lookingAhead = true;
    mcc_semLA = SeeLastRef("TRIM");
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_206()) {
    mcc_scanpos = xsp;
    lookingAhead = true;
    mcc_semLA = SeeLastRef("EXTRACT");
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_207()) {
    mcc_scanpos = xsp;
    if (mcc_3R_208()) return true;
    }
    }
    return false;
  }

  private bool mcc_3R_123() {
    if (mcc_scan_token(154)) return true;
    if (mcc_scan_token(S_NUMBER)) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_100() {
    if (mcc_3R_54()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_125()) mcc_scanpos = xsp;
    if (mcc_scan_token(K_TO)) return true;
    if (mcc_3R_54()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_126()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_99() {
    if (mcc_3R_54()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3R_123()) mcc_scanpos = xsp;
    if (mcc_scan_token(K_TO)) return true;
    if (mcc_3R_54()) return true;
    xsp = mcc_scanpos;
    if (mcc_3R_124()) mcc_scanpos = xsp;
    return false;
  }

  private bool mcc_3R_62() {
    if (mcc_3R_54()) return true;
    if (mcc_3R_66()) return true;
    Token xsp;
    xsp = mcc_scanpos;
    lookingAhead = true;
    mcc_semLA = "DAY".Equals(GetToken(1).image, StringComparison.OrdinalIgnoreCase);
    lookingAhead = false;
    if (!mcc_semLA || mcc_3R_99()) {
    mcc_scanpos = xsp;
    if (mcc_3R_100()) return true;
    }
    return false;
  }

  private bool mcc_3R_61() {
    if (mcc_scan_token(K_CAST)) return true;
    if (mcc_scan_token(154)) return true;
    if (mcc_3R_56()) return true;
    if (mcc_scan_token(K_AS)) return true;
    if (mcc_3R_204()) return true;
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_132() {
    if (mcc_scan_token(165)) return true;
    return false;
  }

  private bool mcc_3R_203() {
    if (mcc_scan_token(K_ELSE)) return true;
    if (mcc_3R_66()) return true;
    return false;
  }

  private bool mcc_3R_212() {
    if (mcc_scan_token(K_WHEN)) return true;
    if (mcc_3R_66()) return true;
    if (mcc_scan_token(K_THEN)) return true;
    if (mcc_3R_66()) return true;
    return false;
  }

  private bool mcc_3R_213() {
    if (mcc_scan_token(K_WHEN)) return true;
    if (mcc_3R_56()) return true;
    if (mcc_scan_token(K_THEN)) return true;
    if (mcc_3R_66()) return true;
    return false;
  }

  private bool mcc_3R_202() {
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_213()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_54() {
    if (mcc_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = mcc_scanpos;
      if (mcc_3R_212()) { mcc_scanpos = xsp; break; }
    }
    return false;
  }

  private bool mcc_3_53() {
    if (mcc_3R_63()) return true;
    if (mcc_scan_token(154)) return true;
    return false;
  }

  private bool mcc_3R_197() {
    if (mcc_scan_token(K_CASE)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_54()) {
    mcc_scanpos = xsp;
    if (mcc_3R_202()) return true;
    }
    xsp = mcc_scanpos;
    if (mcc_3R_203()) mcc_scanpos = xsp;
    if (mcc_scan_token(K_END)) return true;
    return false;
  }

  private bool mcc_3R_312() {
    if (mcc_scan_token(K_ESCAPE)) return true;
    if (mcc_3R_66()) return true;
    return false;
  }

  private bool mcc_3_52() {
    if (mcc_3R_75()) return true;
    return false;
  }

  private bool mcc_3_51() {
    if (mcc_3R_62()) return true;
    return false;
  }

  private bool mcc_3R_148() {
    if (mcc_scan_token(167)) return true;
    return false;
  }

  private bool mcc_3_13() {
    if (mcc_scan_token(154)) return true;
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3_49() {
    if (mcc_3R_56()) return true;
    return false;
  }

  private bool mcc_3R_182() {
    if (mcc_3R_50()) return true;
    return false;
  }

  private bool mcc_3R_181() {
    if (mcc_3R_199()) return true;
    return false;
  }

  private bool mcc_3R_180() {
    if (mcc_3R_198()) return true;
    return false;
  }

  private bool mcc_3_48() {
    if (mcc_3R_60()) return true;
    return false;
  }

  private bool mcc_3R_179() {
    if (mcc_3R_75()) return true;
    return false;
  }

  private bool mcc_3R_178() {
    if (mcc_3R_62()) return true;
    return false;
  }

  private bool mcc_3_50() {
    if (mcc_3R_61()) return true;
    return false;
  }

  private bool mcc_3R_177() {
    if (mcc_3R_115()) return true;
    return false;
  }

  private bool mcc_3R_176() {
    if (mcc_scan_token(154)) return true;
    Token xsp;
    xsp = mcc_scanpos;
    if (mcc_3_48()) {
    mcc_scanpos = xsp;
    if (mcc_3_49()) return true;
    }
    if (mcc_scan_token(155)) return true;
    return false;
  }

  private bool mcc_3R_131() {
    if (mcc_scan_token(164)) return true;
    return false;
  }

  private bool mcc_3R_175() {
    if (mcc_3R_197()) return true;
    return false;
  }

  private bool mcc_3R_174() {
    if (mcc_scan_token(K_NULL)) return true;
    return false;
  }

  public PlSqlTokenManager token_source;
  SimpleCharStream mcc_input_stream;
  public Token token, mcc_nt;
  private int mcc_ntk;
  private Token mcc_scanpos, mcc_lastpos;
  private int mcc_la;
  public bool lookingAhead = false;
  private bool mcc_semLA;
  private int mcc_gen;
  private int[] mcc_la1 = new int[239];
  static private int[] mcc_la1_0;
  static private int[] mcc_la1_1;
  static private int[] mcc_la1_2;
  static private int[] mcc_la1_3;
  static private int[] mcc_la1_4;
  static private int[] mcc_la1_5;
  static PlSql() {
      mcc_gla1_0();
      mcc_gla1_1();
      mcc_gla1_2();
      mcc_gla1_3();
      mcc_gla1_4();
      mcc_gla1_5();
   }
   private static void mcc_gla1_0() {
      mcc_la1_0 = new int[] {5310528,0,0,0,0,0,2097152,536870912,1107845120,0,0,0,0,0,0,0,0,0,0,0,1074290688,0,524288,0,0,1074290688,0,0,5244928,0,0,0,5244928,0,5242880,393216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393216,0,2097152,0,0,0,0,0,0,0,0,0,0,0,0,0,2097152,0,0,0,201326592,0,32,201326592,0,0,0,0,0,0,268435456,0,0,0,0,0,0,0,0,0,0,0,0,268435456,0,0,128,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,393216,393216,0,131072,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1074290688,0,0,0,0,0,32,0,0,0,32,32,0,0,16777216,0,0,0,0,0,512,512,0,0,0,0,0,0,0,268435456,268435456,268435456,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,1024,0,0,0,0,0,0,128,0,0,0,0,0,4096,0,288,288,0,0,0,0,0,0,0,0,0,0,0,0,131072,0,0,0,0,0,0,0,0,0,32,32,0,0,0,0,0,0,0,0,};
   }
   private static void mcc_gla1_1() {
      mcc_la1_1 = new int[] {577159173,0,0,0,0,0,0,0,1073808384,0,0,0,0,0,0,2,2,0,2,0,1073807360,0,1073807360,0,0,1073807360,1024,0,575062021,0,0,1,575062021,536870916,536903684,0,0,0,0,128,64,0,131072,0,131072,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,524288,0,0,0,0,0,0,0,0,67108864,0,0,0,0,512,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67108864,0,2,2,1140916224,0,0,131072,0,-2147483648,0,0,-2147483648,0,16,16,0,0,0,16777216,25165824,25165824,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,268435456,0,0,0,0,0,268435456,268435456,0,268435456,0,268435456,268435456,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,67108864,0,0,0,0,0,0,0,512,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,16,16,0,0,0,524288,0,0,0,0,};
   }
   private static void mcc_gla1_2() {
      mcc_la1_2 = new int[] {1342443616,0,0,0,0,0,0,67108864,16896,0,0,2,0,2,1024,0,0,1024,0,0,16896,0,16896,0,0,16896,0,0,1074008160,0,524288,0,1074008160,0,262176,5120,0,0,0,0,0,0,64,0,0,0,0,0,0,0,5120,0,0,0,0,0,0,0,0,1,0,2048,0,0,0,0,0,131072,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,524288,0,1024,0,2,1042,0,1024,1024,1024,0,1024,0,0,0,0,0,0,4096,5120,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,2097152,0,0,2114048,0,1048576,0,0,256,0,256,256,0,0,0,1,0,0,0,0,0,0,0,0,0,0,4194304,16777216,-2147483648,1048576,0,-2147483648,0,0,0,0,0,0,0,0,0,131072,8,0,0,0,0,131072,0,8,0,8,0,8,8,0,0,0,0,0,0,8192,0,32768,2048,2048,524288,0,1024,1024,134217728,0,2,1042,0,0,0,134217728,1024,1024,1024,0,0,0,0,0,0,0,0,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
   }
   private static void mcc_gla1_3() {
      mcc_la1_3 = new int[] {536916240,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,2,0,0,536916240,0,0,0,536916240,536870912,536916224,1048576,0,0,0,0,0,0,0,0,0,64,64,0,0,0,1048576,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,33554432,0,0,16385,1073741825,0,0,0,67108864,65536,536871424,536871424,66048,0,0,0,0,32,0,0,0,0,0,0,32,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1048576,1048576,1048576,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,262144,134217728,0,0,134217728,8192,268435456,268435456,0,0,2097152,0,0,0,0,0,0,32,32,0,0,1024,0,0,1024,0,0,0,0,0,0,0,0,0,4194304,128,4194304,0,0,0,4194304,0,128,0,128,0,128,128,2097152,2097152,131072,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,268435456,268435456,0,0,0,0,0,0,0,0,};
   }
   private static void mcc_gla1_4() {
      mcc_la1_4 = new int[] {73990208,8388608,66560,4718592,65536,1048576,0,65536,2162694,67108864,67108864,33554432,67108864,33554432,0,536870912,536870912,0,536870912,-1073741824,6,65536,6,268435456,67108864,6,0,65536,73990208,16,0,0,67108928,0,67108864,75039744,67108864,65536,16,0,0,65536,64,65536,0,0,0,67108864,69271552,65536,75039744,256,0,4784128,268435456,4784128,4259840,268435456,4259840,0,268435456,0,67108864,256,0,0,0,512,0,0,0,268435456,65536,0,0,0,0,0,69271552,2162688,0,32,0,268435456,268435456,268435456,69271552,2162688,268435456,0,67108865,0,2162688,0,32,0,0,0,16777216,0,16777216,268435456,0,0,0,0,0,0,0,65536,65536,0,0,75039744,75039744,65536,72877056,2162688,2162688,8388608,16777216,0,0,8388608,0,268435456,0,0,66560,0,0,536870912,536870912,2162694,268435456,0,0,0,0,0,0,0,67108864,0,0,0,32,0,0,0,0,268435456,0,0,2162704,2162704,0,0,0,0,268435456,0,0,0,0,0,268435456,8388608,4784128,67108864,268435456,73990144,268500992,2162688,71827456,2162688,67108864,73990144,0,268500992,0,268500992,0,268500992,268500992,0,0,0,268435456,0,0,0,268435456,0,8,8,0,0,0,0,0,16777216,0,16777216,268435456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72877056,2162688,16,16,0,67108864,67108864,67108864,67108864,65536,0,0,0,67108864,268435456,0,8388608,8388608,65536,0,};
   }
   private static void mcc_gla1_5() {
      mcc_la1_5 = new int[] {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15360,0,15360,0,0,0,0,0,0,56,56,192,192,256,24,24,24,0,0,0,0,0,3072,4096,8192,0,16384,0,24,24,24,0,0,0,0,0,0,0,0,0,65536,0,65536,65536,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,262144,0,262144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15360,0,15360,0,0,0,0,0,0,0,0,56,56,192,192,256,24,24,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,1024,16384,};
   }
  private MccCalls[] mcc_2_rtns = new MccCalls[59];
  private bool mcc_rescan = false;
  private int mcc_gc = 0;

  public PlSql(System.IO.Stream stream) {
    mcc_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PlSqlTokenManager(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 239; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(System.IO.Stream stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 239; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public PlSql(System.IO.TextReader stream) {
    mcc_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PlSqlTokenManager(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 239; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(System.IO.TextReader stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 239; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public PlSql(PlSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 239; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(PlSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 239; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

   private Token mcc_consume_token(int kind) {
    Token oldToken = null;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.GetNextToken();
    mcc_ntk = -1;
    if (token.kind == kind) {
      mcc_gen++;
      if (++mcc_gc > 100) {
        mcc_gc = 0;
        for (int i = 0; i < mcc_2_rtns.Length; i++) {
          MccCalls c = mcc_2_rtns[i];
          while (c != null) {
            if (c.gen < mcc_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    mcc_kind = kind;
    throw GenerateParseException();
  }

  private class LookaheadSuccess : System.Exception { }
  private LookaheadSuccess mcc_ls = new LookaheadSuccess();
  private bool mcc_scan_token(int kind) {
    if (mcc_scanpos == mcc_lastpos) {
      mcc_la--;
      if (mcc_scanpos.next == null) {
        mcc_lastpos = mcc_scanpos = mcc_scanpos.next = token_source.GetNextToken();
      } else {
        mcc_lastpos = mcc_scanpos = mcc_scanpos.next;
      }
    } else {
      mcc_scanpos = mcc_scanpos.next;
    }
    if (mcc_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != mcc_scanpos) { i++; tok = tok.next; }
      if (tok != null) mcc_add_error_token(kind, i);
    }
    if (mcc_scanpos.kind != kind) return true;
    if (mcc_la == 0 && mcc_scanpos == mcc_lastpos) throw mcc_ls;
    return false;
  }

  public Token GetNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.GetNextToken();
    mcc_ntk = -1;
    mcc_gen++;
    return token;
  }

  public Token GetToken(int index) {
    Token t = lookingAhead ? mcc_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.GetNextToken();
    }
    return t;
  }

  private int mcc_mntk() {
    if ((mcc_nt=token.next) == null)
      return (mcc_ntk = (token.next=token_source.GetNextToken()).kind);
    else
      return (mcc_ntk = mcc_nt.kind);
  }

  private System.Collections.ArrayList mcc_expentries = new System.Collections.ArrayList();
  private int[] mcc_expentry;
  private int mcc_kind = -1;
  private int[] mcc_lasttokens = new int[100];
  private int mcc_endpos;

  private void mcc_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == mcc_endpos + 1) {
      mcc_lasttokens[mcc_endpos++] = kind;
    } else if (mcc_endpos != 0) {
      mcc_expentry = new int[mcc_endpos];
      for (int i = 0; i < mcc_endpos; i++) {
        mcc_expentry[i] = mcc_lasttokens[i];
      }
      bool exists = false;
      for (System.Collections.IEnumerator e = mcc_expentries.GetEnumerator(); e.MoveNext();) {
        int[] oldentry = (int[])e.Current;
        if (oldentry.Length == mcc_expentry.Length) {
          exists = true;
          for (int i = 0; i < mcc_expentry.Length; i++) {
            if (oldentry[i] != mcc_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) mcc_expentries.Add(mcc_expentry);
      if (pos != 0) mcc_lasttokens[(mcc_endpos = pos) - 1] = kind;
    }
  }

  public ParseException GenerateParseException() {
    mcc_expentries.Clear();
    bool[] la1tokens = new bool[179];
    for (int i = 0; i < 179; i++) {
      la1tokens[i] = false;
    }
    if (mcc_kind >= 0) {
      la1tokens[mcc_kind] = true;
      mcc_kind = -1;
    }
    for (int i = 0; i < 239; i++) {
      if (mcc_la1[i] == mcc_gen) {
        for (int j = 0; j < 32; j++) {
          if ((mcc_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((mcc_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((mcc_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((mcc_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((mcc_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((mcc_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 179; i++) {
      if (la1tokens[i]) {
        mcc_expentry = new int[1];
        mcc_expentry[0] = i;
        mcc_expentries.Add(mcc_expentry);
      }
    }
    mcc_endpos = 0;
    mcc_rescan_token();
    mcc_add_error_token(0, 0);
    int[][] exptokseq = new int[mcc_expentries.Count][];
    for (int i = 0; i < mcc_expentries.Count; i++) {
      exptokseq[i] = (int[])mcc_expentries[i];
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  public void enable_tracing() {
  }

  public void disable_tracing() {
  }

  private void mcc_rescan_token() {
    mcc_rescan = true;
    for (int i = 0; i < 59; i++) {
      MccCalls p = mcc_2_rtns[i];
      do {
        if (p.gen > mcc_gen) {
          mcc_la = p.arg; mcc_lastpos = mcc_scanpos = p.first;
          switch (i) {
            case 0: mcc_3_1(); break;
            case 1: mcc_3_2(); break;
            case 2: mcc_3_3(); break;
            case 3: mcc_3_4(); break;
            case 4: mcc_3_5(); break;
            case 5: mcc_3_6(); break;
            case 6: mcc_3_7(); break;
            case 7: mcc_3_8(); break;
            case 8: mcc_3_9(); break;
            case 9: mcc_3_10(); break;
            case 10: mcc_3_11(); break;
            case 11: mcc_3_12(); break;
            case 12: mcc_3_13(); break;
            case 13: mcc_3_14(); break;
            case 14: mcc_3_15(); break;
            case 15: mcc_3_16(); break;
            case 16: mcc_3_17(); break;
            case 17: mcc_3_18(); break;
            case 18: mcc_3_19(); break;
            case 19: mcc_3_20(); break;
            case 20: mcc_3_21(); break;
            case 21: mcc_3_22(); break;
            case 22: mcc_3_23(); break;
            case 23: mcc_3_24(); break;
            case 24: mcc_3_25(); break;
            case 25: mcc_3_26(); break;
            case 26: mcc_3_27(); break;
            case 27: mcc_3_28(); break;
            case 28: mcc_3_29(); break;
            case 29: mcc_3_30(); break;
            case 30: mcc_3_31(); break;
            case 31: mcc_3_32(); break;
            case 32: mcc_3_33(); break;
            case 33: mcc_3_34(); break;
            case 34: mcc_3_35(); break;
            case 35: mcc_3_36(); break;
            case 36: mcc_3_37(); break;
            case 37: mcc_3_38(); break;
            case 38: mcc_3_39(); break;
            case 39: mcc_3_40(); break;
            case 40: mcc_3_41(); break;
            case 41: mcc_3_42(); break;
            case 42: mcc_3_43(); break;
            case 43: mcc_3_44(); break;
            case 44: mcc_3_45(); break;
            case 45: mcc_3_46(); break;
            case 46: mcc_3_47(); break;
            case 47: mcc_3_48(); break;
            case 48: mcc_3_49(); break;
            case 49: mcc_3_50(); break;
            case 50: mcc_3_51(); break;
            case 51: mcc_3_52(); break;
            case 52: mcc_3_53(); break;
            case 53: mcc_3_54(); break;
            case 54: mcc_3_55(); break;
            case 55: mcc_3_56(); break;
            case 56: mcc_3_57(); break;
            case 57: mcc_3_58(); break;
            case 58: mcc_3_59(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    mcc_rescan = false;
  }

  private void mcc_save(int index, int xla) {
    MccCalls p = mcc_2_rtns[index];
    while (p.gen > mcc_gen) {
      if (p.next == null) { p = p.next = new MccCalls(); break; }
      p = p.next;
    }
    p.gen = mcc_gen + xla - mcc_la; p.first = token; p.arg = xla;
  }

  class MccCalls {
    public int gen;
    public Token first;
    public int arg;
    public MccCalls next;
  }

}
}
