/* Generated By:CSharpCC: Do not edit this line. PlSqlTokenManager.cs */
namespace Deveel.Data.Sql.Parser {

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using Deveel.Data.Expressions;
using Deveel.Data.Sql.Statements;
using Deveel.Data.Types;

internal  class PlSqlTokenManager : PlSqlConstants {
  public  System.IO.TextWriter debugStream = Console.Out;
  public  void SetDebugStream(System.IO.TextWriter ds) { debugStream = ds; }
private int mccStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 68719476736L) != 0L)
            return 0;
         if ((active0 & -32L) != 0L || (active1 & -1L) != 0L || (active2 & 1407374883554303L) != 0L)
         {
            mccmatchedKind = 144;
            return 68;
         }
         if ((active2 & 562967141679104L) != 0L)
            return 69;
         if ((active2 & 541065216L) != 0L)
            return 18;
         if ((active2 & 549755813888L) != 0L)
            return 3;
         return -1;
      case 1:
         if ((active0 & 144115050636868064L) != 0L || (active1 & -144115188077658120L) != 0L || (active2 & 1407374883554303L) != 0L)
         {
            if (mccmatchedPos != 1) {
               mccmatchedKind = 144;
               mccmatchedPos = 1;
            }
            return 68;
         }
         if ((active0 & -144115050636868096L) != 0L || (active1 & 144115188077658119L) != 0L)
            return 68;
         return -1;
      case 2:
         if ((active0 & 1689949371893152L) != 0L || (active1 & 4616336986974716928L) != 0L || (active2 & 1125899906842624L) != 0L)
            return 68;
         if ((active1 & 536870912L) != 0L)
         {
            if (mccmatchedPos != 2) {
               mccmatchedKind = 144;
               mccmatchedPos = 2;
            }
            return 11;
         }
         if ((active0 & -434035651038447552L) != 0L || (active1 & -4760452175588066307L) != 0L || (active2 & 281474976711679L) != 0L)
         {
            if (mccmatchedPos != 2) {
               mccmatchedKind = 144;
               mccmatchedPos = 2;
            }
            return 68;
         }
         return -1;
      case 3:
         if ((active0 & 24840477007085568L) != 0L || (active1 & 109216701899747449L) != 0L || (active2 & 408L) != 0L)
            return 68;
         if ((active0 & -457750228138690496L) != 0L || (active1 & -4869664479441302652L) != 0L || (active2 & 1407374883553895L) != 0L)
         {
            if (mccmatchedPos != 3) {
               mccmatchedKind = 144;
               mccmatchedPos = 3;
            }
            return 68;
         }
         if ((active1 & 536870912L) != 0L)
         {
            if (mccmatchedPos != 3) {
               mccmatchedKind = 144;
               mccmatchedPos = 3;
            }
            return 11;
         }
         return -1;
      case 4:
         if ((active1 & 536870912L) != 0L)
         {
            mccmatchedKind = 144;
            mccmatchedPos = 4;
            return 11;
         }
         if ((active0 & -2223584044289855488L) != 0L || (active1 & 3749943179256809988L) != 0L || (active2 & 1407374883553287L) != 0L)
         {
            mccmatchedKind = 144;
            mccmatchedPos = 4;
            return 68;
         }
         if ((active0 & 1765833816151164992L) != 0L || (active1 & -8619607658698104448L) != 0L || (active2 & 608L) != 0L)
            return 68;
         return -1;
      case 5:
         if ((active1 & 536870912L) != 0L)
         {
            if (mccmatchedPos != 5) {
               mccmatchedKind = 144;
               mccmatchedPos = 5;
            }
            return 11;
         }
         if ((active0 & 2379063904283131904L) != 0L || (active1 & 3458808717691078656L) != 0L || (active2 & 1L) != 0L)
            return 68;
         if ((active0 & -4602647948572987392L) != 0L || (active1 & 291134461565731332L) != 0L || (active2 & 281474976710662L) != 0L)
         {
            if (mccmatchedPos != 5) {
               mccmatchedKind = 144;
               mccmatchedPos = 5;
            }
            return 68;
         }
         return -1;
      case 6:
         if ((active0 & -9214333982311710720L) != 0L || (active1 & 291134324118388740L) != 0L)
         {
            if (mccmatchedPos != 6) {
               mccmatchedKind = 144;
               mccmatchedPos = 6;
            }
            return 68;
         }
         if ((active0 & 4611686033747103744L) != 0L || (active1 & 274886296064L) != 0L || (active2 & 6L) != 0L)
            return 68;
         if ((active0 & 8192L) != 0L || (active1 & 536870912L) != 0L)
         {
            if (mccmatchedPos != 6) {
               mccmatchedKind = 144;
               mccmatchedPos = 6;
            }
            return 11;
         }
         return -1;
      case 7:
         if ((active0 & 8192L) != 0L || (active1 & 536870912L) != 0L)
         {
            mccmatchedKind = 144;
            mccmatchedPos = 7;
            return 11;
         }
         if ((active0 & -9223341250319482880L) != 0L || (active1 & 288318474806099972L) != 0L)
         {
            mccmatchedKind = 144;
            mccmatchedPos = 7;
            return 68;
         }
         if ((active0 & 9007268007772160L) != 0L || (active1 & 2815849312288768L) != 0L)
            return 68;
         if ((active2 & 2L) != 0L)
            return 11;
         return -1;
      case 8:
         if ((active0 & 8192L) != 0L || (active1 & 536870912L) != 0L)
         {
            if (mccmatchedPos != 8) {
               mccmatchedKind = 144;
               mccmatchedPos = 8;
            }
            return 11;
         }
         if ((active0 & -9223341250520809472L) != 0L || (active1 & 17729910210564L) != 0L)
            return 68;
         if ((active0 & 201326592L) != 0L || (active1 & 288300744895889408L) != 0L)
         {
            if (mccmatchedPos != 8) {
               mccmatchedKind = 144;
               mccmatchedPos = 8;
            }
            return 68;
         }
         return -1;
      case 9:
         if ((active1 & 288300744895889408L) != 0L)
         {
            if (mccmatchedPos != 9) {
               mccmatchedKind = 144;
               mccmatchedPos = 9;
            }
            return 68;
         }
         if ((active0 & 201326592L) != 0L)
            return 68;
         if ((active1 & 536870912L) != 0L)
            return 11;
         if ((active0 & 8796093030400L) != 0L)
         {
            if (mccmatchedPos != 9) {
               mccmatchedKind = 144;
               mccmatchedPos = 9;
            }
            return 11;
         }
         return -1;
      case 10:
         if ((active1 & 70368744177664L) != 0L)
         {
            mccmatchedKind = 144;
            mccmatchedPos = 10;
            return 68;
         }
         if ((active0 & 8796093030400L) != 0L)
         {
            mccmatchedKind = 144;
            mccmatchedPos = 10;
            return 11;
         }
         if ((active0 & 134217728L) != 0L || (active1 & 288230376151711744L) != 0L)
            return 68;
         return -1;
      case 11:
         if ((active0 & 8796093030400L) != 0L)
         {
            mccmatchedKind = 144;
            mccmatchedPos = 11;
            return 11;
         }
         if ((active1 & 70368744177664L) != 0L)
            return 68;
         return -1;
      case 12:
         if ((active0 & 8796093030400L) != 0L)
         {
            mccmatchedKind = 144;
            mccmatchedPos = 12;
            return 11;
         }
         return -1;
      default :
         return -1;
   }
}
private int mccStartNfa_0(int pos, long active0, long active1, long active2)
{
   return mccMoveNfa_0(mccStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int mccStopAtPos(int pos, int kind)
{
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   return pos + 1;
}
private int mccStartNfaWithStates_0(int pos, int kind, int state) {
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) { return pos + 1; }
   return mccMoveNfa_0(state, pos + 1);
}
private int mccMoveStringLiteralDfa0_0()
{
   switch((int)curChar) {
      case 33:
         return mccStopAtPos(0, 170);
      case 35:
         return mccStopAtPos(0, 171);
      case 37:
         mccmatchedKind = 169;
         return mccMoveStringLiteralDfa1_0(0L, 0L, 3221225472L);
      case 40:
         return mccStopAtPos(0, 154);
      case 41:
         return mccStopAtPos(0, 155);
      case 42:
         mccmatchedKind = 166;
         return mccMoveStringLiteralDfa1_0(0L, 0L, 1099511627776L);
      case 43:
         return mccStopAtPos(0, 163);
      case 44:
         return mccStopAtPos(0, 156);
      case 45:
         return mccStartNfaWithStates_0(0, 164, 0);
      case 46:
         mccmatchedKind = 151;
         return mccMoveStringLiteralDfa1_0(0L, 0L, 562967133290496L);
      case 47:
         return mccStartNfaWithStates_0(0, 167, 3);
      case 58:
         mccmatchedKind = 150;
         return mccMoveStringLiteralDfa1_0(0L, 0L, 536870912L);
      case 59:
         return mccStopAtPos(0, 153);
      case 60:
         mccmatchedKind = 173;
         return mccMoveStringLiteralDfa1_0(0L, 0L, 4294967296L);
      case 61:
         mccmatchedKind = 152;
         return mccMoveStringLiteralDfa1_0(0L, 0L, 140737488355328L);
      case 62:
         mccmatchedKind = 172;
         return mccMoveStringLiteralDfa1_0(0L, 0L, 8589934592L);
      case 64:
         return mccStopAtPos(0, 174);
      case 65:
      case 97:
         return mccMoveStringLiteralDfa1_0(2016L, 0L, 0L);
      case 66:
      case 98:
         return mccMoveStringLiteralDfa1_0(63488L, 0L, 0L);
      case 67:
      case 99:
         return mccMoveStringLiteralDfa1_0(1073676288L, 0L, 0L);
      case 68:
      case 100:
         return mccMoveStringLiteralDfa1_0(273804165120L, 0L, 0L);
      case 69:
      case 101:
         return mccMoveStringLiteralDfa1_0(140462610448384L, 0L, 281474976710656L);
      case 70:
      case 102:
         return mccMoveStringLiteralDfa1_0(17873661021126656L, 0L, 0L);
      case 71:
      case 103:
         return mccMoveStringLiteralDfa1_0(54043195528445952L, 0L, 0L);
      case 72:
      case 104:
         return mccMoveStringLiteralDfa1_0(72057594037927936L, 0L, 0L);
      case 73:
      case 105:
         return mccMoveStringLiteralDfa1_0(-144115188075855872L, 7L, 0L);
      case 76:
      case 108:
         return mccMoveStringLiteralDfa1_0(0L, 120L, 0L);
      case 77:
      case 109:
         return mccMoveStringLiteralDfa1_0(0L, 384L, 0L);
      case 78:
      case 110:
         return mccMoveStringLiteralDfa1_0(0L, 32256L, 0L);
      case 79:
      case 111:
         return mccMoveStringLiteralDfa1_0(0L, 8355840L, 1125899906842624L);
      case 80:
      case 112:
         return mccMoveStringLiteralDfa1_0(0L, 1065353216L, 0L);
      case 82:
      case 114:
         return mccMoveStringLiteralDfa1_0(0L, 8795019280384L, 0L);
      case 83:
      case 115:
         return mccMoveStringLiteralDfa1_0(0L, 18005602416459776L, 0L);
      case 84:
      case 116:
         return mccMoveStringLiteralDfa1_0(0L, 558446353793941504L, 0L);
      case 85:
      case 117:
         return mccMoveStringLiteralDfa1_0(0L, -576460752303423488L, 0L);
      case 86:
      case 118:
         return mccMoveStringLiteralDfa1_0(0L, 0L, 7L);
      case 87:
      case 119:
         return mccMoveStringLiteralDfa1_0(0L, 0L, 1016L);
      case 124:
         return mccMoveStringLiteralDfa1_0(0L, 0L, 137438953472L);
      default :
         return mccMoveNfa_0(2, 0);
   }
}
private int mccMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch((int)curChar) {
      case 42:
         if ((active2 & 1099511627776L) != 0L)
            return mccStopAtPos(1, 168);
         else if ((active2 & 562949953421312L) != 0L)
            return mccStopAtPos(1, 177);
         break;
      case 46:
         if ((active2 & 17179869184L) != 0L)
            return mccStopAtPos(1, 162);
         break;
      case 60:
         if ((active2 & 4294967296L) != 0L)
            return mccStopAtPos(1, 160);
         break;
      case 61:
         if ((active2 & 536870912L) != 0L)
            return mccStopAtPos(1, 157);
         break;
      case 62:
         if ((active2 & 8589934592L) != 0L)
            return mccStopAtPos(1, 161);
         else if ((active2 & 140737488355328L) != 0L)
            return mccStopAtPos(1, 175);
         break;
      case 65:
      case 97:
         return mccMoveStringLiteralDfa2_0(active0, 72057595112128512L, active1, 18040790034940416L, active2, 15L);
      case 69:
      case 101:
         return mccMoveStringLiteralDfa2_0(active0, 140804060354560L, active1, 36275633084432520L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 144115188075855872L) != 0L)
            return mccStartNfaWithStates_0(1, 57, 68);
         else if ((active1 & 32768L) != 0L)
            return mccStartNfaWithStates_0(1, 79, 68);
         break;
      case 72:
      case 104:
         return mccMoveStringLiteralDfa2_0(active0, 524288L, active1, 72339069014638592L, active2, 112L);
      case 73:
      case 105:
         return mccMoveStringLiteralDfa2_0(active0, 68719484928L, active1, 563499709235472L, active2, 128L);
      case 75:
      case 107:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 1125899906842624L, active2, 0L);
      case 76:
      case 108:
         return mccMoveStringLiteralDfa2_0(active0, 282299611480160L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 2251799813685248L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 288230376151711744L) != 0L)
         {
            mccmatchedKind = 58;
            mccmatchedPos = 1;
         }
         else if ((active1 & 65536L) != 0L)
         {
            mccmatchedKind = 80;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, -576459652791795328L, active1, 1729382256910401537L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 137438953472L) != 0L)
            return mccStartNfaWithStates_0(1, 37, 68);
         else if ((active1 & 144115188075855872L) != 0L)
            return mccStartNfaWithStates_0(1, 121, 68);
         return mccMoveStringLiteralDfa2_0(active0, 19703248636100608L, active1, 7696614952032L, active2, 256L);
      case 80:
      case 112:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 2305843009213956096L, active2, 0L);
      case 81:
      case 113:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 4503599627370496L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 524288L) != 0L)
         {
            mccmatchedKind = 83;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 38280596832649216L, active1, 288230376622522368L, active2, 2147484160L);
      case 83:
      case 115:
         if ((active0 & 512L) != 0L)
         {
            mccmatchedKind = 9;
            mccmatchedPos = 1;
         }
         else if ((active1 & 2L) != 0L)
         {
            mccmatchedKind = 65;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 2199023256576L, active1, -4611686018427387900L, active2, 0L);
      case 84:
      case 116:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 9007199254740992L, active2, 1073741824L);
      case 85:
      case 117:
         return mccMoveStringLiteralDfa2_0(active0, 13510799687417856L, active1, 2125824L, active2, 1125899906842624L);
      case 86:
      case 118:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 4194304L, active2, 0L);
      case 88:
      case 120:
         return mccMoveStringLiteralDfa2_0(active0, 136339441844224L, active1, 536870912L, active2, 281474976710656L);
      case 89:
      case 121:
         if ((active0 & 32768L) != 0L)
            return mccStartNfaWithStates_0(1, 15, 68);
         break;
      case 124:
         if ((active2 & 137438953472L) != 0L)
            return mccStopAtPos(1, 165);
         break;
      default :
         break;
   }
   return mccStartNfa_0(0, active0, active1, active2);
}
private int mccMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch((int)curChar) {
      case 95:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 536870912L, active2, 0L);
      case 65:
      case 97:
         return mccMoveStringLiteralDfa3_0(active0, 524288L, active1, 299770863148859392L, active2, 0L);
      case 66:
      case 98:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 18577348462903296L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 1024L) != 0L)
            return mccStartNfaWithStates_0(2, 10, 68);
         return mccMoveStringLiteralDfa3_0(active0, 32991791284224L, active1, 17188257824L, active2, 281474976710656L);
      case 68:
      case 100:
         if ((active0 & 128L) != 0L)
            return mccStartNfaWithStates_0(2, 7, 68);
         else if ((active0 & 1099511627776L) != 0L)
            return mccStartNfaWithStates_0(2, 40, 68);
         return mccMoveStringLiteralDfa3_0(active0, 576460752303423488L, active1, 2305843009214742528L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 4611686018427387904L) != 0L)
            return mccStartNfaWithStates_0(2, 126, 68);
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 72057594042384384L, active2, 48L);
      case 70:
      case 102:
         if ((active1 & 34359738368L) != 0L)
            return mccStartNfaWithStates_0(2, 99, 68);
         return mccMoveStringLiteralDfa3_0(active0, 8589934592L, active1, 8L, active2, 0L);
      case 71:
      case 103:
         return mccMoveStringLiteralDfa3_0(active0, 2048L, active1, 549755813888L, active2, 0L);
      case 73:
      case 105:
         return mccMoveStringLiteralDfa3_0(active0, 105553116266496L, active1, -7492863878829703168L, active2, 584L);
      case 75:
      case 107:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 16L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 32L) != 0L)
            return mccStartNfaWithStates_0(2, 5, 68);
         else if ((active1 & 4503599627370496L) != 0L)
            return mccStartNfaWithStates_0(2, 116, 68);
         return mccMoveStringLiteralDfa3_0(active0, 4503616807305216L, active1, 36283883859968L, active2, 1L);
      case 77:
      case 109:
         return mccMoveStringLiteralDfa3_0(active0, 14680064L, active1, 8796093038592L, active2, 0L);
      case 78:
      case 110:
         return mccMoveStringLiteralDfa3_0(active0, 1161928704113254400L, active1, 2147483904L, active2, 0L);
      case 79:
      case 111:
         return mccMoveStringLiteralDfa3_0(active0, 38562071810424832L, active1, 268435524L, active2, 2147483648L);
      case 82:
      case 114:
         if ((active0 & 562949953421312L) != 0L)
         {
            mccmatchedKind = 49;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 1125900712148992L, active1, 70368760955008L, active2, 262L);
      case 83:
      case 115:
         return mccMoveStringLiteralDfa3_0(active0, 2305843936927023104L, active1, 36028797052518400L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 1024L) != 0L)
            return mccStartNfaWithStates_0(2, 74, 68);
         else if ((active1 & 2097152L) != 0L)
         {
            mccmatchedKind = 85;
            mccmatchedPos = 2;
         }
         else if ((active1 & 140737488355328L) != 0L)
            return mccStartNfaWithStates_0(2, 111, 68);
         return mccMoveStringLiteralDfa3_0(active0, -4593530881355804608L, active1, 206158430721L, active2, 1125899906842752L);
      case 86:
      case 118:
         return mccMoveStringLiteralDfa3_0(active0, 72057594037927936L, active1, 17867063951360L, active2, 0L);
      case 87:
      case 119:
         if ((active1 & 2199023255552L) != 0L)
         {
            mccmatchedKind = 105;
            mccmatchedPos = 2;
         }
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 4398046513152L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 256L) != 0L)
            return mccStartNfaWithStates_0(2, 8, 68);
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 1073741824L);
      default :
         break;
   }
   return mccStartNfa_0(1, active0, active1, active2);
}
private int mccMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch((int)curChar) {
      case 65:
      case 97:
         return mccMoveStringLiteralDfa4_0(active0, 1409582496751616L, active1, 2305843009213696000L, active2, 0L);
      case 66:
      case 98:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 16384L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 34359738368L) != 0L)
            return mccStartNfaWithStates_0(3, 35, 68);
         return mccMoveStringLiteralDfa4_0(active0, 9147936743096320L, active1, 268435456L, active2, 6L);
      case 68:
      case 100:
         if ((active1 & 4294967296L) != 0L)
            return mccStartNfaWithStates_0(3, 96, 68);
         break;
      case 69:
      case 101:
         if ((active0 & 131072L) != 0L)
            return mccStartNfaWithStates_0(3, 17, 68);
         else if ((active0 & 1073741824L) != 0L)
            return mccStartNfaWithStates_0(3, 30, 68);
         else if ((active0 & 274877906944L) != 0L)
            return mccStartNfaWithStates_0(3, 38, 68);
         else if ((active1 & 16L) != 0L)
            return mccStartNfaWithStates_0(3, 68, 68);
         return mccMoveStringLiteralDfa4_0(active0, -576447540984020928L, active1, 53051437088768L, active2, 1407374883553280L);
      case 71:
      case 103:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 2751463552L, active2, 0L);
      case 72:
      case 104:
         if ((active2 & 128L) != 0L)
            return mccStartNfaWithStates_0(3, 135, 68);
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 549755813888L, active2, 0L);
      case 73:
      case 105:
         return mccMoveStringLiteralDfa4_0(active0, 72058145941227520L, active1, 70368777732096L, active2, 0L);
      case 75:
      case 107:
         if ((active1 & 32L) != 0L)
            return mccStartNfaWithStates_0(3, 69, 68);
         else if ((active2 & 256L) != 0L)
            return mccStartNfaWithStates_0(3, 136, 68);
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 8388608L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 65536L) != 0L)
            return mccStartNfaWithStates_0(3, 16, 68);
         else if ((active0 & 4503599627370496L) != 0L)
            return mccStartNfaWithStates_0(3, 52, 68);
         else if ((active1 & 4096L) != 0L)
         {
            mccmatchedKind = 76;
            mccmatchedPos = 3;
         }
         else if ((active1 & 8589934592L) != 0L)
            return mccStartNfaWithStates_0(3, 97, 68);
         return mccMoveStringLiteralDfa4_0(active0, 17596481028096L, active1, 20830247788224516L, active2, 64L);
      case 77:
      case 109:
         if ((active0 & 2251799813685248L) != 0L)
            return mccStartNfaWithStates_0(3, 51, 68);
         return mccMoveStringLiteralDfa4_0(active0, 14680064L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 262144L) != 0L)
            return mccStartNfaWithStates_0(3, 82, 68);
         else if ((active1 & 72057594037927936L) != 0L)
            return mccStartNfaWithStates_0(3, 120, 68);
         else if ((active2 & 16L) != 0L)
            return mccStartNfaWithStates_0(3, 132, 68);
         return mccMoveStringLiteralDfa4_0(active0, 16777216L, active1, -8935141660703064064L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 18014398509481984L) != 0L)
            return mccStartNfaWithStates_0(3, 54, 68);
         else if ((active1 & 1L) != 0L)
            return mccStartNfaWithStates_0(3, 64, 68);
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 576460769617510400L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 64L) != 0L)
            return mccStartNfaWithStates_0(3, 70, 68);
         else if ((active1 & 1125899906842624L) != 0L)
            return mccStartNfaWithStates_0(3, 114, 68);
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 8796093022208L, active2, 1073741824L);
      case 81:
      case 113:
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 1152921504606846976L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 524288L) != 0L)
            return mccStartNfaWithStates_0(3, 19, 68);
         else if ((active1 & 4194304L) != 0L)
            return mccStartNfaWithStates_0(3, 86, 68);
         return mccMoveStringLiteralDfa4_0(active0, 268435456L, active1, 9288674231451648L, active2, 32L);
      case 83:
      case 115:
         if ((active1 & 4398046511104L) != 0L)
            return mccStartNfaWithStates_0(3, 106, 68);
         return mccMoveStringLiteralDfa4_0(active0, 35185144889344L, active1, 1073741824L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 262144L) != 0L)
            return mccStartNfaWithStates_0(3, 18, 68);
         else if ((active0 & 70368744177664L) != 0L)
            return mccStartNfaWithStates_0(3, 46, 68);
         else if ((active1 & 8L) != 0L)
            return mccStartNfaWithStates_0(3, 67, 68);
         else if ((active1 & 36028797018963968L) != 0L)
            return mccStartNfaWithStates_0(3, 119, 68);
         else if ((active2 & 8L) != 0L)
            return mccStartNfaWithStates_0(3, 131, 68);
         return mccMoveStringLiteralDfa4_0(active0, 68719476736L, active1, 16777216L, active2, 512L);
      case 85:
      case 117:
         return mccMoveStringLiteralDfa4_0(active0, 36028797018963968L, active1, 206158430976L, active2, 1L);
      case 87:
      case 119:
         return mccMoveStringLiteralDfa4_0(active0, 4096L, active1, 0L, active2, 2147483648L);
      case 89:
      case 121:
         if ((active1 & 131072L) != 0L)
            return mccStartNfaWithStates_0(3, 81, 68);
         break;
      default :
         break;
   }
   return mccStartNfa_0(2, active0, active1, active2);
}
private int mccMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch((int)curChar) {
      case 65:
      case 97:
         return mccMoveStringLiteralDfa5_0(active0, 4294967296L, active1, 70368752566276L, active2, 0L);
      case 66:
      case 98:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 1099511627776L, active2, 0L);
      case 67:
      case 99:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 35184372088832L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 1048576L) != 0L)
            return mccStartNfaWithStates_0(4, 20, 68);
         else if ((active1 & 128L) != 0L)
            return mccStartNfaWithStates_0(4, 71, 68);
         else if ((active1 & 1073741824L) != 0L)
            return mccStartNfaWithStates_0(4, 94, 68);
         else if ((active1 & 2147483648L) != 0L)
            return mccStartNfaWithStates_0(4, 95, 68);
         else if ((active1 & 281474976710656L) != 0L)
            return mccStartNfaWithStates_0(4, 112, 68);
         else if ((active1 & 18014398509481984L) != 0L)
            return mccStartNfaWithStates_0(4, 118, 68);
         else if ((active2 & 32L) != 0L)
            return mccStartNfaWithStates_0(4, 133, 68);
         else if ((active2 & 64L) != 0L)
            return mccStartNfaWithStates_0(4, 134, 68);
         else if ((active2 & 512L) != 0L)
            return mccStartNfaWithStates_0(4, 137, 68);
         else if ((active2 & 1073741824L) != 0L)
            return mccStopAtPos(4, 158);
         return mccMoveStringLiteralDfa5_0(active0, 287330304L, active1, 268451840L, active2, 1L);
      case 70:
      case 102:
         if ((active0 & 549755813888L) != 0L)
            return mccStartNfaWithStates_0(4, 39, 68);
         break;
      case 71:
      case 103:
         if ((active1 & -9223372036854775808L) != 0L)
            return mccStartNfaWithStates_0(4, 127, 68);
         return mccMoveStringLiteralDfa5_0(active0, 4611686018427387904L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         if ((active0 & 140737488355328L) != 0L)
            return mccStartNfaWithStates_0(4, 47, 68);
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 6L);
      case 73:
      case 105:
         return mccMoveStringLiteralDfa5_0(active0, 68732059648L, active1, 562949970200576L, active2, 0L);
      case 76:
      case 108:
         return mccMoveStringLiteralDfa5_0(active0, 1125899906842624L, active1, 2260595906707456L, active2, 0L);
      case 77:
      case 109:
         return mccMoveStringLiteralDfa5_0(active0, 2147483648L, active1, 67108864L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 2048L) != 0L)
            return mccStartNfaWithStates_0(4, 11, 68);
         else if ((active1 & 576460752303423488L) != 0L)
            return mccStartNfaWithStates_0(4, 123, 68);
         return mccMoveStringLiteralDfa5_0(active0, 72057594037927936L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return mccMoveStringLiteralDfa5_0(active0, 536870912L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 36028797018963968L) != 0L)
            return mccStartNfaWithStates_0(4, 55, 68);
         return mccMoveStringLiteralDfa5_0(active0, 15393162788864L, active1, 17592186044416L, active2, 281474976710656L);
      case 82:
      case 114:
         if ((active0 & 64L) != 0L)
            return mccStartNfaWithStates_0(4, 6, 68);
         else if ((active0 & 1152921504606846976L) != 0L)
            return mccStartNfaWithStates_0(4, 60, 68);
         else if ((active1 & 1048576L) != 0L)
            return mccStartNfaWithStates_0(4, 84, 68);
         else if ((active1 & 134217728L) != 0L)
            return mccStartNfaWithStates_0(4, 91, 68);
         else if ((active2 & 1125899906842624L) != 0L)
            return mccStartNfaWithStates_0(4, 144, 68);
         return mccMoveStringLiteralDfa5_0(active0, -6917529027641073664L, active1, 498753077760L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 256L) != 0L)
            return mccStartNfaWithStates_0(4, 72, 68);
         else if ((active1 & 8192L) != 0L)
            return mccStartNfaWithStates_0(4, 77, 68);
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 288230376151711744L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 281474976710656L) != 0L)
            return mccStartNfaWithStates_0(4, 48, 68);
         else if ((active1 & 549755813888L) != 0L)
            return mccStartNfaWithStates_0(4, 103, 68);
         else if ((active1 & 9007199254740992L) != 0L)
            return mccStartNfaWithStates_0(4, 117, 68);
         return mccMoveStringLiteralDfa5_0(active0, 9042401041580032L, active1, 2305843009247248384L, active2, 2147483648L);
      case 85:
      case 117:
         return mccMoveStringLiteralDfa5_0(active0, 17600775979008L, active1, 1152921504606846976L, active2, 0L);
      case 88:
      case 120:
         if ((active0 & 576460752303423488L) != 0L)
            return mccStartNfaWithStates_0(4, 59, 68);
         break;
      default :
         break;
   }
   return mccStartNfa_0(3, active0, active1, active2);
}
private int mccMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch((int)curChar) {
      case 65:
      case 97:
         if ((active1 & 67108864L) != 0L)
            return mccStartNfaWithStates_0(5, 90, 68);
         return mccMoveStringLiteralDfa6_0(active0, 2181054464L, active1, 288231476200210944L, active2, 6L);
      case 67:
      case 99:
         return mccMoveStringLiteralDfa6_0(active0, 16777216L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 17179869184L) != 0L)
            return mccStartNfaWithStates_0(5, 98, 68);
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 268435456L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 17179869184L) != 0L)
            return mccStartNfaWithStates_0(5, 34, 68);
         else if ((active0 & 2199023255552L) != 0L)
            return mccStartNfaWithStates_0(5, 41, 68);
         else if ((active1 & 8796093022208L) != 0L)
            return mccStartNfaWithStates_0(5, 107, 68);
         else if ((active1 & 1152921504606846976L) != 0L)
            return mccStartNfaWithStates_0(5, 124, 68);
         else if ((active1 & 2305843009213693952L) != 0L)
            return mccStartNfaWithStates_0(5, 125, 68);
         return mccMoveStringLiteralDfa6_0(active0, 4611686018427392000L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 72057594037927936L) != 0L)
            return mccStartNfaWithStates_0(5, 56, 68);
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 8388608L, active2, 0L);
      case 73:
      case 105:
         return mccMoveStringLiteralDfa6_0(active0, 9007199254740992L, active1, 2251799847239680L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 1125899906842624L) != 0L)
            return mccStartNfaWithStates_0(5, 50, 68);
         return mccMoveStringLiteralDfa6_0(active0, 8589934592L, active1, 70368744177664L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 68719476736L) != 0L)
         {
            mccmatchedKind = 100;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 68990009344L, active1, 563087392374784L, active2, 0L);
      case 79:
      case 111:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 17592186044416L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 536870912L) != 0L)
            return mccStartNfaWithStates_0(5, 29, 68);
         else if ((active1 & 16384L) != 0L)
            return mccStartNfaWithStates_0(5, 78, 68);
         return mccMoveStringLiteralDfa6_0(active0, 4496293888L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 35184372088832L) != 0L)
            return mccStartNfaWithStates_0(5, 45, 68);
         else if ((active2 & 1L) != 0L)
            return mccStartNfaWithStates_0(5, 128, 68);
         return mccMoveStringLiteralDfa6_0(active0, -9223354444668731392L, active1, 274877906944L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 4194304L) != 0L)
         {
            mccmatchedKind = 22;
            mccmatchedPos = 5;
         }
         else if ((active0 & 2305843009213693952L) != 0L)
            return mccStartNfaWithStates_0(5, 61, 68);
         else if ((active1 & 2048L) != 0L)
            return mccStartNfaWithStates_0(5, 75, 68);
         else if ((active1 & 35184372088832L) != 0L)
            return mccStartNfaWithStates_0(5, 109, 68);
         else if ((active2 & 281474976710656L) != 0L)
         {
            mccmatchedKind = 144;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 13194147921920L, active1, 16777220L, active2, 0L);
      case 89:
      case 121:
         return mccMoveStringLiteralDfa6_0(active0, 8192L, active1, 0L, active2, 2147483648L);
      default :
         break;
   }
   return mccStartNfa_0(4, active0, active1, active2);
}
private int mccMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(4, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch((int)curChar) {
      case 95:
         return mccMoveStringLiteralDfa7_0(active0, 8192L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         return mccMoveStringLiteralDfa7_0(active0, 201326592L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return mccMoveStringLiteralDfa7_0(active0, 68719476736L, active1, 288231475663339520L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 4294967296L) != 0L)
            return mccStartNfaWithStates_0(6, 32, 68);
         else if ((active1 & 8388608L) != 0L)
            return mccStartNfaWithStates_0(6, 87, 68);
         else if ((active1 & 274877906944L) != 0L)
            return mccStartNfaWithStates_0(6, 102, 68);
         return mccMoveStringLiteralDfa7_0(active0, -9223372036854775808L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 562949953421312L, active2, 0L);
      case 73:
      case 105:
         return mccMoveStringLiteralDfa7_0(active0, 30786325577728L, active1, 88098385952772L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 2147483648L) != 0L)
            return mccStartNfaWithStates_0(6, 31, 68);
         else if ((active1 & 512L) != 0L)
            return mccStartNfaWithStates_0(6, 73, 68);
         break;
      case 78:
      case 110:
         if ((active0 & 4096L) != 0L)
            return mccStartNfaWithStates_0(6, 12, 68);
         else if ((active0 & 16384L) != 0L)
            return mccStartNfaWithStates_0(6, 14, 68);
         return mccMoveStringLiteralDfa7_0(active0, 33554432L, active1, 2251800350556160L, active2, 0L);
      case 79:
      case 111:
         return mccMoveStringLiteralDfa7_0(active0, 9007199254740992L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 2147483648L);
      case 82:
      case 114:
         if ((active0 & 4611686018427387904L) != 0L)
            return mccStartNfaWithStates_0(6, 62, 68);
         else if ((active2 & 4L) != 0L)
         {
            mccmatchedKind = 130;
            mccmatchedPos = 6;
         }
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 2L);
      case 84:
      case 116:
         if ((active0 & 2097152L) != 0L)
            return mccStartNfaWithStates_0(6, 21, 68);
         else if ((active0 & 16777216L) != 0L)
            return mccStartNfaWithStates_0(6, 24, 68);
         else if ((active0 & 268435456L) != 0L)
            return mccStartNfaWithStates_0(6, 28, 68);
         else if ((active0 & 8589934592L) != 0L)
            return mccStartNfaWithStates_0(6, 33, 68);
         return mccMoveStringLiteralDfa7_0(active0, 8388608L, active1, 0L, active2, 0L);
      case 85:
      case 117:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 268435456L, active2, 0L);
      case 86:
      case 118:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 33554432L, active2, 0L);
      default :
         break;
   }
   return mccStartNfa_0(5, active0, active1, active2);
}
private int mccMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(5, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch((int)curChar) {
      case 50:
         if ((active2 & 2L) != 0L)
            return mccStartNfaWithStates_0(7, 129, 11);
         break;
      case 67:
      case 99:
         return mccMoveStringLiteralDfa8_0(active0, -9223372036854775808L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 33554432L) != 0L)
            return mccStartNfaWithStates_0(7, 89, 68);
         else if ((active2 & 2147483648L) != 0L)
            return mccStopAtPos(7, 159);
         return mccMoveStringLiteralDfa8_0(active0, 8388608L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return mccMoveStringLiteralDfa8_0(active0, 201334784L, active1, 0L, active2, 0L);
      case 75:
      case 107:
         if ((active1 & 1099511627776L) != 0L)
            return mccStartNfaWithStates_0(7, 104, 68);
         break;
      case 78:
      case 110:
         if ((active0 & 9007199254740992L) != 0L)
            return mccStartNfaWithStates_0(7, 53, 68);
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 17729624997888L, active2, 0L);
      case 79:
      case 111:
         return mccMoveStringLiteralDfa8_0(active0, 13194139533312L, active1, 16777220L, active2, 0L);
      case 82:
      case 114:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 268435456L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 562949953421312L) != 0L)
            return mccStartNfaWithStates_0(7, 113, 68);
         break;
      case 84:
      case 116:
         if ((active0 & 33554432L) != 0L)
            return mccStartNfaWithStates_0(7, 25, 68);
         else if ((active0 & 68719476736L) != 0L)
            return mccStartNfaWithStates_0(7, 36, 68);
         else if ((active1 & 2251799813685248L) != 0L)
            return mccStartNfaWithStates_0(7, 115, 68);
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 288230376151711744L, active2, 0L);
      case 85:
      case 117:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 536870912L, active2, 0L);
      case 86:
      case 118:
         return mccMoveStringLiteralDfa8_0(active0, 17592186044416L, active1, 0L, active2, 0L);
      case 90:
      case 122:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 70368744177664L, active2, 0L);
      default :
         break;
   }
   return mccStartNfa_0(6, active0, active1, active2);
}
private int mccMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(6, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch((int)curChar) {
      case 65:
      case 97:
         return mccMoveStringLiteralDfa9_0(active0, 0L, active1, 70368744177664L);
      case 68:
      case 100:
         if ((active0 & 8388608L) != 0L)
            return mccStartNfaWithStates_0(8, 23, 68);
         break;
      case 69:
      case 101:
         if ((active0 & 17592186044416L) != 0L)
            return mccStartNfaWithStates_0(8, 44, 68);
         else if ((active1 & 268435456L) != 0L)
            return mccStartNfaWithStates_0(8, 92, 68);
         break;
      case 71:
      case 103:
         if ((active1 & 137438953472L) != 0L)
            return mccStartNfaWithStates_0(8, 101, 68);
         break;
      case 73:
      case 105:
         return mccMoveStringLiteralDfa9_0(active0, 0L, active1, 288230376151711744L);
      case 76:
      case 108:
         return mccMoveStringLiteralDfa9_0(active0, 0L, active1, 536870912L);
      case 78:
      case 110:
         if ((active0 & 4398046511104L) != 0L)
         {
            mccmatchedKind = 42;
            mccmatchedPos = 8;
         }
         else if ((active1 & 4L) != 0L)
            return mccStartNfaWithStates_0(8, 66, 68);
         else if ((active1 & 16777216L) != 0L)
            return mccStartNfaWithStates_0(8, 88, 68);
         return mccMoveStringLiteralDfa9_0(active0, 8796294356992L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & -9223372036854775808L) != 0L)
            return mccStartNfaWithStates_0(8, 63, 68);
         else if ((active1 & 17592186044416L) != 0L)
            return mccStartNfaWithStates_0(8, 108, 68);
         break;
      default :
         break;
   }
   return mccStartNfa_0(7, active0, active1, 0L);
}
private int mccMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return mccStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch((int)curChar) {
      case 95:
         return mccMoveStringLiteralDfa10_0(active0, 8796093022208L, active1, 0L);
      case 66:
      case 98:
         return mccMoveStringLiteralDfa10_0(active0, 0L, active1, 70368744177664L);
      case 69:
      case 101:
         if ((active1 & 536870912L) != 0L)
            return mccStartNfaWithStates_0(9, 93, 11);
         break;
      case 79:
      case 111:
         return mccMoveStringLiteralDfa10_0(active0, 0L, active1, 288230376151711744L);
      case 84:
      case 116:
         if ((active0 & 67108864L) != 0L)
         {
            mccmatchedKind = 26;
            mccmatchedPos = 9;
         }
         return mccMoveStringLiteralDfa10_0(active0, 134225920L, active1, 0L);
      default :
         break;
   }
   return mccStartNfa_0(8, active0, active1, 0L);
}
private int mccMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return mccStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch((int)curChar) {
      case 69:
      case 101:
         return mccMoveStringLiteralDfa11_0(active0, 8192L, active1, 0L);
      case 73:
      case 105:
         return mccMoveStringLiteralDfa11_0(active0, 8796093022208L, active1, 0L);
      case 76:
      case 108:
         return mccMoveStringLiteralDfa11_0(active0, 0L, active1, 70368744177664L);
      case 78:
      case 110:
         if ((active1 & 288230376151711744L) != 0L)
            return mccStartNfaWithStates_0(10, 122, 68);
         break;
      case 83:
      case 115:
         if ((active0 & 134217728L) != 0L)
            return mccStartNfaWithStates_0(10, 27, 68);
         break;
      default :
         break;
   }
   return mccStartNfa_0(9, active0, active1, 0L);
}
private int mccMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return mccStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch((int)curChar) {
      case 69:
      case 101:
         if ((active1 & 70368744177664L) != 0L)
            return mccStartNfaWithStates_0(11, 110, 68);
         break;
      case 71:
      case 103:
         return mccMoveStringLiteralDfa12_0(active0, 8192L, active1, 0L);
      case 78:
      case 110:
         return mccMoveStringLiteralDfa12_0(active0, 8796093022208L, active1, 0L);
      default :
         break;
   }
   return mccStartNfa_0(10, active0, active1, 0L);
}
private int mccMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return mccStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch((int)curChar) {
      case 69:
      case 101:
         return mccMoveStringLiteralDfa13_0(active0, 8192L);
      case 73:
      case 105:
         return mccMoveStringLiteralDfa13_0(active0, 8796093022208L);
      default :
         break;
   }
   return mccStartNfa_0(11, active0, 0L, 0L);
}
private int mccMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return mccStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch((int)curChar) {
      case 82:
      case 114:
         if ((active0 & 8192L) != 0L)
            return mccStartNfaWithStates_0(13, 13, 11);
         break;
      case 84:
      case 116:
         if ((active0 & 8796093022208L) != 0L)
            return mccStartNfaWithStates_0(13, 43, 11);
         break;
      default :
         break;
   }
   return mccStartNfa_0(12, active0, 0L, 0L);
}
private void mccCheckNAdd(int state)
{
   if (mccrounds[state] != mccround)
   {
      mccstateSet[mccnewStateCnt++] = state;
      mccrounds[state] = mccround;
   }
}
private void mccAddStates(int start, int end)
{
   do {
      mccstateSet[mccnewStateCnt++] = mccnextStates[start];
   } while (start++ != end);
}
private void mccCheckNAddTwoStates(int state1, int state2)
{
   mccCheckNAdd(state1);
   mccCheckNAdd(state2);
}
private void mccCheckNAddStates(int start, int end)
{
   do {
      mccCheckNAdd(mccnextStates[start]);
   } while (start++ != end);
}
private void mccCheckNAddStates(int start)
{
   mccCheckNAdd(mccnextStates[start]);
   mccCheckNAdd(mccnextStates[start + 1]);
}
static readonly long[] mccbitVec0 = {
   0L, 0L, -1L, -1L
};
private int mccMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   mccnewStateCnt = 68;
   int i = 1;
   mccstateSet[0] = startState;
   int j, kind = Int32.MaxValue;
   for (;;)
   {
      if (++mccround == Int32.MaxValue)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(mccstateSet[--i])
            {
               case 2:
                  if ((287948901175001088 & l) != 0L)
                  {
                     if (kind > 138)
                        kind = 138;
                     mccCheckNAddStates(0, 6);
                  }
                  else if (curChar == 46)
                     mccCheckNAddTwoStates(48, 58);
                  else if (curChar == 34)
                     mccCheckNAddTwoStates(45, 46);
                  else if (curChar == 39)
                     mccCheckNAddTwoStates(40, 41);
                  else if (curChar == 58)
                     mccAddStates(7, 9);
                  else if (curChar == 47)
                     mccstateSet[mccnewStateCnt++] = 3;
                  else if (curChar == 45)
                     mccstateSet[mccnewStateCnt++] = 0;
                  break;
               case 68:
               case 11:
                  if ((287949004254216192 & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  mccCheckNAdd(11);
                  break;
               case 69:
                  if ((287948901175001088 & l) != 0L)
                  {
                     if (kind > 138)
                        kind = 138;
                     mccCheckNAdd(58);
                  }
                  if ((287948901175001088 & l) != 0L)
                  {
                     if (kind > 138)
                        kind = 138;
                     mccCheckNAddTwoStates(48, 49);
                  }
                  break;
               case 18:
                  if ((287948901175001088 & l) != 0L)
                  {
                     if (kind > 147)
                        kind = 147;
                     mccCheckNAddStates(10, 16);
                  }
                  else if (curChar == 46)
                     mccCheckNAddTwoStates(37, 38);
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 142)
                     kind = 142;
                  mccCheckNAdd(1);
                  break;
               case 1:
                  if ((-9217 & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  mccCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 42)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((-4398046511105 & l) != 0L)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 42)
                     mccCheckNAddStates(17, 19);
                  break;
               case 6:
                  if ((-145135534866433 & l) != 0L)
                     mccCheckNAddTwoStates(7, 5);
                  break;
               case 7:
                  if ((-4398046511105 & l) != 0L)
                     mccCheckNAddTwoStates(7, 5);
                  break;
               case 8:
                  if (curChar == 47 && kind > 143)
                     kind = 143;
                  break;
               case 9:
                  if (curChar == 47)
                     mccstateSet[mccnewStateCnt++] = 3;
                  break;
               case 12:
                  if (curChar == 58)
                     mccAddStates(7, 9);
                  break;
               case 14:
                  if ((287949004254216192 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccAddStates(20, 21);
                  break;
               case 15:
                  if (curChar == 46)
                     mccstateSet[mccnewStateCnt++] = 16;
                  break;
               case 17:
                  if ((287949004254216192 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccstateSet[mccnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAdd(19);
                  break;
               case 20:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 46)
                     mccCheckNAdd(22);
                  break;
               case 22:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAdd(22);
                  break;
               case 23:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if ((43980465111040 & l) != 0L)
                     mccAddStates(22, 23);
                  break;
               case 26:
                  if (curChar == 46)
                     mccCheckNAdd(27);
                  break;
               case 27:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAdd(27);
                  break;
               case 28:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAddStates(24, 26);
                  break;
               case 29:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAdd(29);
                  break;
               case 30:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar == 46)
                     mccCheckNAdd(32);
                  break;
               case 32:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAdd(32);
                  break;
               case 33:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAddStates(27, 29);
                  break;
               case 34:
                  if (curChar == 46)
                     mccCheckNAdd(35);
                  break;
               case 35:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAddTwoStates(35, 24);
                  break;
               case 36:
                  if (curChar == 46)
                     mccCheckNAddTwoStates(37, 38);
                  break;
               case 37:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAdd(37);
                  break;
               case 38:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAddTwoStates(38, 24);
                  break;
               case 39:
                  if (curChar == 39)
                     mccCheckNAddTwoStates(40, 41);
                  break;
               case 40:
                  if ((-549755813889 & l) != 0L)
                     mccCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar != 39)
                     break;
                  if (kind > 148)
                     kind = 148;
                  mccstateSet[mccnewStateCnt++] = 42;
                  break;
               case 42:
                  if (curChar == 39)
                     mccCheckNAddTwoStates(43, 41);
                  break;
               case 43:
                  if ((-549755813889 & l) != 0L)
                     mccCheckNAddTwoStates(43, 41);
                  break;
               case 44:
                  if (curChar == 34)
                     mccCheckNAddTwoStates(45, 46);
                  break;
               case 45:
                  if ((-17179878401 & l) != 0L)
                     mccCheckNAddTwoStates(45, 46);
                  break;
               case 46:
                  if (curChar == 34 && kind > 149)
                     kind = 149;
                  break;
               case 47:
                  if (curChar == 46)
                     mccCheckNAddTwoStates(48, 58);
                  break;
               case 48:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  mccCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((43980465111040 & l) != 0L)
                     mccAddStates(30, 31);
                  break;
               case 51:
                  if (curChar == 46)
                     mccCheckNAdd(52);
                  break;
               case 52:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  mccCheckNAdd(52);
                  break;
               case 53:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  mccCheckNAddStates(32, 34);
                  break;
               case 54:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  mccCheckNAdd(54);
                  break;
               case 55:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  mccCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar == 46)
                     mccCheckNAdd(57);
                  break;
               case 57:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  mccCheckNAdd(57);
                  break;
               case 58:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  mccCheckNAdd(58);
                  break;
               case 59:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  mccCheckNAddStates(0, 6);
                  break;
               case 60:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  mccCheckNAddTwoStates(60, 49);
                  break;
               case 61:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  mccCheckNAddStates(35, 37);
                  break;
               case 62:
                  if (curChar == 46)
                     mccCheckNAdd(63);
                  break;
               case 63:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  mccCheckNAddTwoStates(63, 49);
                  break;
               case 64:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  mccCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if (curChar == 46)
                     mccCheckNAdd(66);
                  break;
               case 66:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  mccCheckNAdd(66);
                  break;
               case 67:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 138)
                     kind = 138;
                  mccCheckNAdd(67);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 2:
               case 10:
                  if ((576460743847706622 & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  mccCheckNAddTwoStates(10, 11);
                  break;
               case 68:
                  if ((576460745995190270 & l) != 0L)
                  {
                     if (kind > 144)
                        kind = 144;
                     mccCheckNAdd(11);
                  }
                  if ((576460743847706622 & l) != 0L)
                  {
                     if (kind > 144)
                        kind = 144;
                     mccCheckNAddTwoStates(10, 11);
                  }
                  break;
               case 18:
               case 13:
                  if ((576460743847706622 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAddStates(38, 40);
                  break;
               case 1:
                  if (kind > 142)
                     kind = 142;
                  mccstateSet[mccnewStateCnt++] = 1;
                  break;
               case 4:
                  mccCheckNAddTwoStates(4, 5);
                  break;
               case 6:
               case 7:
                  mccCheckNAddTwoStates(7, 5);
                  break;
               case 11:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  mccCheckNAdd(11);
                  break;
               case 14:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if ((576460743847706622 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  mccCheckNAdd(17);
                  break;
               case 24:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(41, 43);
                  break;
               case 40:
                  mccCheckNAddTwoStates(40, 41);
                  break;
               case 43:
                  mccCheckNAddTwoStates(43, 41);
                  break;
               case 45:
                  mccAddStates(44, 45);
                  break;
               case 49:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(46, 48);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 1:
                  if ((mccbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  mccstateSet[mccnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 6:
               case 7:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccCheckNAddTwoStates(7, 5);
                  break;
               case 40:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccCheckNAddTwoStates(40, 41);
                  break;
               case 43:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccCheckNAddTwoStates(43, 41);
                  break;
               case 45:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccAddStates(44, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != Int32.MaxValue)
      {
         mccmatchedKind = kind;
         mccmatchedPos = curPos;
         kind = Int32.MaxValue;
      }
      ++curPos;
      if ((i = mccnewStateCnt) == (startsAt = 68 - (mccnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.ReadChar(); }
      catch(System.IO.IOException) { return curPos; }
   }
}
static readonly int[] mccnextStates = {
   60, 61, 62, 49, 64, 65, 67, 13, 18, 36, 19, 20, 21, 23, 33, 34, 
   24, 5, 6, 8, 14, 15, 26, 28, 29, 30, 31, 33, 34, 24, 51, 53, 
   54, 55, 56, 61, 62, 49, 13, 14, 15, 25, 26, 28, 45, 46, 50, 51, 
   53, 
};
public static readonly string[] mccstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, ":", ".", "=", 
";", "(", ")", ",", ":=", null, null, "<<", ">>", "..", "+", "-", "||", "*", "/", 
"**", "%", "!", "#", ">", "<", "@", "=>", null, ".*", null, };
public static readonly string[] lexStateNames = {
   "DEFAULT", 
};
static readonly long[] mcctoToken = {
   -31, -1, 2251799813228543, 
};
static readonly long[] mcctoSkip = {
   30, 0, 49152, 
};
static readonly long[] mcctoSpecial = {
   0, 0, 49152, 
};
protected SimpleCharStream input_stream;
private readonly int[] mccrounds = new int[68];
private readonly int[] mccstateSet = new int[136];
protected char curChar;
public PlSqlTokenManager(SimpleCharStream stream) {
   if (SimpleCharStream.staticFlag)
      throw new System.SystemException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public PlSqlTokenManager(SimpleCharStream stream, int lexState)
   : this(stream) {
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream) {
   mccmatchedPos = mccnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   mccround = -2147483647;
   for (i = 68; i-- > 0;)
      mccrounds[i] = Int32.MinValue;
}
public void ReInit(SimpleCharStream stream, int lexState) {
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState) {
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.InvalidLexicalState);
   else
      curLexState = lexState;
}

protected Token mccFillToken()
{
   Token t = Token.NewToken(mccmatchedKind);
   t.kind = mccmatchedKind;
   string im = mccstrLiteralImages[mccmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.BeginLine;
   t.beginColumn = input_stream.BeginColumn;
   t.endLine = input_stream.EndLine;
   t.endColumn = input_stream.EndColumn;
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int mccnewStateCnt;
int mccround;
int mccmatchedPos;
int mccmatchedKind;

public Token GetNextToken() {
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

for (;;) {
   try {
      curChar = input_stream.BeginToken();
   } catch(System.IO.IOException) {
      mccmatchedKind = 0;
      matchedToken = mccFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.Backup(0);
      while (curChar <= ' ' && (4294977024L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   } catch (System.IO.IOException) { goto EOFLoop; }
   mccmatchedKind = Int32.MaxValue;
   mccmatchedPos = 0;
   curPos = mccMoveStringLiteralDfa0_0();
   if (mccmatchedKind != Int32.MaxValue) {
      if (mccmatchedPos + 1 < curPos)
         input_stream.Backup(curPos - mccmatchedPos - 1);
      if ((mcctoToken[mccmatchedKind >> 6] & (1L << (mccmatchedKind & 63))) != 0L) {
         matchedToken = mccFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((mcctoSpecial[mccmatchedKind >> 6] & (1L << (mccmatchedKind & 63))) != 0L) {
            matchedToken = mccFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         goto EOFLoop;
      }
   }
   int error_line = input_stream.EndLine;
   int error_column = input_stream.EndColumn;
   string error_after = null;
   bool EOFSeen = false;
   try { input_stream.ReadChar(); input_stream.Backup(1); }
   catch (System.IO.IOException) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      } else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.Backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LexicalError);
EOFLoop: ;
  }
}

}
}
